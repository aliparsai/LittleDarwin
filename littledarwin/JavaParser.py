# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,116,1491,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,1,0,3,0,226,8,0,1,0,5,0,229,8,0,10,
        0,12,0,232,9,0,1,0,5,0,235,8,0,10,0,12,0,238,9,0,1,0,1,0,1,1,5,1,
        243,8,1,10,1,12,1,246,9,1,1,1,1,1,1,1,1,1,1,2,1,2,3,2,254,8,2,1,
        2,1,2,1,2,3,2,259,8,2,1,2,1,2,1,3,5,3,264,8,3,10,3,12,3,267,9,3,
        1,3,1,3,5,3,271,8,3,10,3,12,3,274,9,3,1,3,1,3,5,3,278,8,3,10,3,12,
        3,281,9,3,1,3,1,3,5,3,285,8,3,10,3,12,3,288,9,3,1,3,1,3,5,3,292,
        8,3,10,3,12,3,295,9,3,1,3,1,3,3,3,299,8,3,1,4,1,4,1,4,1,4,1,4,3,
        4,306,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,318,8,5,1,
        6,1,6,3,6,322,8,6,1,7,1,7,1,7,3,7,327,8,7,1,7,1,7,3,7,331,8,7,1,
        7,1,7,3,7,335,8,7,1,7,3,7,338,8,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,
        9,1,9,5,9,349,8,9,10,9,12,9,352,9,9,1,9,1,9,1,10,5,10,357,8,10,10,
        10,12,10,360,9,10,1,10,1,10,1,10,3,10,365,8,10,1,11,1,11,1,11,5,
        11,370,8,11,10,11,12,11,373,9,11,1,12,1,12,1,12,1,12,3,12,379,8,
        12,1,12,1,12,3,12,383,8,12,1,12,3,12,386,8,12,1,12,3,12,389,8,12,
        1,12,1,12,1,13,1,13,1,13,5,13,396,8,13,10,13,12,13,399,9,13,1,14,
        5,14,402,8,14,10,14,12,14,405,9,14,1,14,1,14,3,14,409,8,14,1,14,
        3,14,412,8,14,1,15,1,15,5,15,416,8,15,10,15,12,15,419,9,15,1,16,
        1,16,1,16,3,16,424,8,16,1,16,1,16,3,16,428,8,16,1,16,3,16,431,8,
        16,1,16,1,16,1,17,1,17,1,17,3,17,438,8,17,1,17,1,17,3,17,442,8,17,
        1,17,1,17,1,17,3,17,447,8,17,1,17,1,17,1,18,1,18,1,18,5,18,454,8,
        18,10,18,12,18,457,9,18,1,19,1,19,1,19,1,20,1,20,5,20,464,8,20,10,
        20,12,20,467,9,20,1,20,1,20,1,21,1,21,1,21,5,21,474,8,21,10,21,12,
        21,477,9,21,1,22,1,22,5,22,481,8,22,10,22,12,22,484,9,22,1,22,1,
        22,1,23,1,23,5,23,490,8,23,10,23,12,23,493,9,23,1,23,1,23,1,24,1,
        24,3,24,499,8,24,1,24,1,24,5,24,503,8,24,10,24,12,24,506,9,24,1,
        24,3,24,509,8,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,
        25,520,8,25,1,26,1,26,3,26,524,8,26,1,26,1,26,1,26,1,26,5,26,530,
        8,26,10,26,12,26,533,9,26,1,26,1,26,3,26,537,8,26,1,26,1,26,3,26,
        541,8,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,3,28,550,8,28,1,28,1,
        28,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,5,31,562,8,31,10,31,12,
        31,565,9,31,1,31,1,31,3,31,569,8,31,1,32,1,32,1,32,1,32,1,32,1,32,
        1,32,3,32,578,8,32,1,33,1,33,1,33,1,33,5,33,584,8,33,10,33,12,33,
        587,9,33,1,33,1,33,1,34,1,34,1,34,5,34,594,8,34,10,34,12,34,597,
        9,34,1,34,1,34,1,34,1,35,1,35,5,35,604,8,35,10,35,12,35,607,9,35,
        1,35,3,35,610,8,35,1,35,1,35,3,35,614,8,35,1,35,1,35,1,35,1,35,1,
        35,5,35,621,8,35,10,35,12,35,624,9,35,1,35,1,35,3,35,628,8,35,1,
        35,1,35,3,35,632,8,35,1,36,1,36,1,36,1,37,1,37,1,37,5,37,640,8,37,
        10,37,12,37,643,9,37,1,38,1,38,1,38,3,38,648,8,38,1,39,1,39,1,39,
        5,39,653,8,39,10,39,12,39,656,9,39,1,40,1,40,3,40,660,8,40,1,41,
        1,41,1,41,1,41,5,41,666,8,41,10,41,12,41,669,9,41,1,41,3,41,672,
        8,41,3,41,674,8,41,1,41,1,41,1,42,1,42,1,42,5,42,681,8,42,10,42,
        12,42,684,9,42,1,42,1,42,1,42,5,42,689,8,42,10,42,12,42,692,9,42,
        3,42,694,8,42,1,43,1,43,3,43,698,8,43,1,43,1,43,1,43,3,43,703,8,
        43,5,43,705,8,43,10,43,12,43,708,9,43,1,44,1,44,1,45,1,45,1,45,1,
        45,5,45,716,8,45,10,45,12,45,719,9,45,1,45,1,45,1,46,3,46,724,8,
        46,1,46,1,46,1,47,1,47,1,47,1,47,3,47,732,8,47,3,47,734,8,47,1,48,
        1,48,1,48,5,48,739,8,48,10,48,12,48,742,9,48,1,49,1,49,3,49,746,
        8,49,1,49,1,49,1,50,1,50,1,50,5,50,753,8,50,10,50,12,50,756,9,50,
        1,50,1,50,3,50,760,8,50,1,50,3,50,763,8,50,1,51,5,51,766,8,51,10,
        51,12,51,769,9,51,1,51,1,51,3,51,773,8,51,1,51,1,51,1,52,5,52,778,
        8,52,10,52,12,52,781,9,52,1,52,1,52,1,52,1,52,1,53,1,53,1,54,1,54,
        1,55,1,55,1,55,5,55,794,8,55,10,55,12,55,797,9,55,1,56,1,56,1,57,
        1,57,1,57,1,57,1,57,3,57,806,8,57,1,57,3,57,809,8,57,1,58,1,58,1,
        59,1,59,1,59,5,59,816,8,59,10,59,12,59,819,9,59,1,60,1,60,1,60,1,
        60,1,61,1,61,1,61,3,61,828,8,61,1,62,1,62,1,62,1,62,5,62,834,8,62,
        10,62,12,62,837,9,62,3,62,839,8,62,1,62,3,62,842,8,62,1,62,1,62,
        1,63,1,63,1,63,1,63,1,63,1,64,1,64,5,64,853,8,64,10,64,12,64,856,
        9,64,1,64,1,64,1,65,5,65,861,8,65,10,65,12,65,864,9,65,1,65,1,65,
        3,65,868,8,65,1,66,1,66,1,66,1,66,1,66,1,66,3,66,876,8,66,1,66,1,
        66,3,66,880,8,66,1,66,1,66,3,66,884,8,66,1,66,1,66,3,66,888,8,66,
        3,66,890,8,66,1,67,1,67,3,67,894,8,67,1,68,1,68,1,68,1,68,3,68,900,
        8,68,1,69,1,69,1,70,1,70,1,70,1,71,1,71,5,71,909,8,71,10,71,12,71,
        912,9,71,1,71,1,71,1,72,1,72,1,72,3,72,919,8,72,1,73,1,73,1,73,1,
        74,5,74,925,8,74,10,74,12,74,928,9,74,1,74,1,74,3,74,932,8,74,1,
        74,1,74,1,75,1,75,1,75,1,75,1,75,3,75,941,8,75,1,75,1,75,1,75,1,
        75,1,75,1,75,1,75,3,75,950,8,75,1,75,1,75,1,75,1,75,1,75,1,75,1,
        75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,4,
        75,971,8,75,11,75,12,75,972,1,75,3,75,976,8,75,1,75,3,75,979,8,75,
        1,75,1,75,1,75,1,75,5,75,985,8,75,10,75,12,75,988,9,75,1,75,3,75,
        991,8,75,1,75,1,75,1,75,1,75,5,75,997,8,75,10,75,12,75,1000,9,75,
        1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,1010,8,75,1,75,1,75,
        1,75,1,75,1,75,1,75,1,75,3,75,1019,8,75,1,75,1,75,1,75,3,75,1024,
        8,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,
        3,75,1038,8,75,1,76,1,76,1,76,5,76,1043,8,76,10,76,12,76,1046,9,
        76,1,76,1,76,1,76,1,76,1,76,1,77,1,77,1,77,5,77,1056,8,77,10,77,
        12,77,1059,9,77,1,78,1,78,1,78,1,79,1,79,1,79,3,79,1067,8,79,1,79,
        1,79,1,80,1,80,1,80,5,80,1074,8,80,10,80,12,80,1077,9,80,1,81,5,
        81,1080,8,81,10,81,12,81,1083,9,81,1,81,1,81,1,81,1,81,1,81,1,82,
        4,82,1091,8,82,11,82,12,82,1092,1,82,1,82,5,82,1097,8,82,10,82,12,
        82,1100,9,82,1,82,1,82,3,82,1104,8,82,1,83,1,83,1,83,3,83,1109,8,
        83,1,83,1,83,3,83,1113,8,83,1,83,3,83,1116,8,83,1,84,1,84,3,84,1120,
        8,84,1,84,1,84,3,84,1124,8,84,1,84,1,84,3,84,1128,8,84,3,84,1130,
        8,84,1,85,1,85,3,85,1134,8,85,1,86,5,86,1137,8,86,10,86,12,86,1140,
        9,86,1,86,1,86,3,86,1144,8,86,1,86,1,86,1,86,1,86,1,87,1,87,1,88,
        1,88,1,88,1,88,1,89,1,89,1,89,5,89,1159,8,89,10,89,12,89,1162,9,
        89,1,90,1,90,1,91,1,91,1,92,1,92,5,92,1170,8,92,10,92,12,92,1173,
        9,92,1,92,3,92,1176,8,92,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,
        1,93,1,93,1,93,1,93,1,93,3,93,1191,8,93,1,93,1,93,1,93,1,93,1,93,
        1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,1207,8,93,1,93,
        1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,
        1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,
        1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,
        1,93,3,93,1250,8,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,
        1,93,1,93,3,93,1263,8,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,
        1,93,3,93,1274,8,93,1,93,1,93,1,93,1,93,1,93,1,93,5,93,1282,8,93,
        10,93,12,93,1285,9,93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,
        94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,1306,8,
        94,1,94,1,94,1,94,3,94,1311,8,94,1,94,1,94,3,94,1315,8,94,1,95,1,
        95,1,95,1,95,5,95,1321,8,95,10,95,12,95,1324,9,95,1,95,1,95,1,96,
        1,96,1,96,1,96,1,97,1,97,1,97,3,97,1335,8,97,1,97,1,97,1,97,1,97,
        1,97,1,97,1,97,5,97,1344,8,97,10,97,12,97,1347,9,97,1,97,1,97,3,
        97,1351,8,97,1,97,1,97,1,97,5,97,1356,8,97,10,97,12,97,1359,9,97,
        1,97,1,97,3,97,1363,8,97,1,97,5,97,1366,8,97,10,97,12,97,1369,9,
        97,1,97,3,97,1372,8,97,1,98,1,98,1,98,5,98,1377,8,98,10,98,12,98,
        1380,9,98,1,99,1,99,3,99,1384,8,99,1,100,1,100,1,100,1,100,1,100,
        1,100,1,100,3,100,1393,8,100,3,100,1395,8,100,1,101,1,101,3,101,
        1399,8,101,1,101,1,101,1,101,3,101,1404,8,101,5,101,1406,8,101,10,
        101,12,101,1409,9,101,1,101,3,101,1412,8,101,1,102,1,102,3,102,1416,
        8,102,1,102,1,102,1,103,1,103,1,103,1,103,5,103,1424,8,103,10,103,
        12,103,1427,9,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,5,103,
        1436,8,103,10,103,12,103,1439,9,103,1,103,1,103,5,103,1443,8,103,
        10,103,12,103,1446,9,103,3,103,1448,8,103,1,104,1,104,3,104,1452,
        8,104,1,105,1,105,1,105,1,106,1,106,1,106,1,106,1,107,1,107,1,107,
        3,107,1464,8,107,1,108,1,108,1,108,3,108,1469,8,108,1,109,1,109,
        1,109,1,109,3,109,1475,8,109,3,109,1477,8,109,1,110,1,110,1,110,
        1,110,3,110,1483,8,110,1,111,1,111,3,111,1487,8,111,1,111,1,111,
        1,111,0,1,186,112,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
        34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
        78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
        116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
        148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
        180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,
        212,214,216,218,220,222,0,12,1,0,110,111,8,0,10,10,12,12,15,15,21,
        21,27,27,34,34,36,36,44,44,2,0,24,24,47,47,1,0,58,64,2,0,77,78,87,
        90,2,0,91,92,96,96,1,0,89,90,2,0,75,76,82,83,2,0,81,81,84,84,2,0,
        74,74,99,109,2,0,38,38,110,110,1,0,87,88,1644,0,225,1,0,0,0,2,244,
        1,0,0,0,4,251,1,0,0,0,6,298,1,0,0,0,8,305,1,0,0,0,10,317,1,0,0,0,
        12,321,1,0,0,0,14,323,1,0,0,0,16,341,1,0,0,0,18,344,1,0,0,0,20,358,
        1,0,0,0,22,366,1,0,0,0,24,374,1,0,0,0,26,392,1,0,0,0,28,403,1,0,
        0,0,30,413,1,0,0,0,32,420,1,0,0,0,34,434,1,0,0,0,36,450,1,0,0,0,
        38,458,1,0,0,0,40,461,1,0,0,0,42,470,1,0,0,0,44,478,1,0,0,0,46,487,
        1,0,0,0,48,508,1,0,0,0,50,519,1,0,0,0,52,523,1,0,0,0,54,542,1,0,
        0,0,56,545,1,0,0,0,58,553,1,0,0,0,60,556,1,0,0,0,62,568,1,0,0,0,
        64,577,1,0,0,0,66,579,1,0,0,0,68,590,1,0,0,0,70,605,1,0,0,0,72,633,
        1,0,0,0,74,636,1,0,0,0,76,644,1,0,0,0,78,649,1,0,0,0,80,659,1,0,
        0,0,82,661,1,0,0,0,84,693,1,0,0,0,86,695,1,0,0,0,88,709,1,0,0,0,
        90,711,1,0,0,0,92,723,1,0,0,0,94,733,1,0,0,0,96,735,1,0,0,0,98,743,
        1,0,0,0,100,762,1,0,0,0,102,767,1,0,0,0,104,779,1,0,0,0,106,786,
        1,0,0,0,108,788,1,0,0,0,110,790,1,0,0,0,112,798,1,0,0,0,114,800,
        1,0,0,0,116,810,1,0,0,0,118,812,1,0,0,0,120,820,1,0,0,0,122,827,
        1,0,0,0,124,829,1,0,0,0,126,845,1,0,0,0,128,850,1,0,0,0,130,867,
        1,0,0,0,132,889,1,0,0,0,134,893,1,0,0,0,136,895,1,0,0,0,138,901,
        1,0,0,0,140,903,1,0,0,0,142,906,1,0,0,0,144,918,1,0,0,0,146,920,
        1,0,0,0,148,926,1,0,0,0,150,1037,1,0,0,0,152,1039,1,0,0,0,154,1052,
        1,0,0,0,156,1060,1,0,0,0,158,1063,1,0,0,0,160,1070,1,0,0,0,162,1081,
        1,0,0,0,164,1090,1,0,0,0,166,1115,1,0,0,0,168,1129,1,0,0,0,170,1133,
        1,0,0,0,172,1138,1,0,0,0,174,1149,1,0,0,0,176,1151,1,0,0,0,178,1155,
        1,0,0,0,180,1163,1,0,0,0,182,1165,1,0,0,0,184,1167,1,0,0,0,186,1190,
        1,0,0,0,188,1314,1,0,0,0,190,1316,1,0,0,0,192,1327,1,0,0,0,194,1371,
        1,0,0,0,196,1373,1,0,0,0,198,1383,1,0,0,0,200,1394,1,0,0,0,202,1411,
        1,0,0,0,204,1413,1,0,0,0,206,1419,1,0,0,0,208,1449,1,0,0,0,210,1453,
        1,0,0,0,212,1456,1,0,0,0,214,1463,1,0,0,0,216,1468,1,0,0,0,218,1476,
        1,0,0,0,220,1482,1,0,0,0,222,1484,1,0,0,0,224,226,3,2,1,0,225,224,
        1,0,0,0,225,226,1,0,0,0,226,230,1,0,0,0,227,229,3,4,2,0,228,227,
        1,0,0,0,229,232,1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,236,
        1,0,0,0,232,230,1,0,0,0,233,235,3,6,3,0,234,233,1,0,0,0,235,238,
        1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,239,1,0,0,0,238,236,
        1,0,0,0,239,240,5,0,0,1,240,1,1,0,0,0,241,243,3,114,57,0,242,241,
        1,0,0,0,243,246,1,0,0,0,244,242,1,0,0,0,244,245,1,0,0,0,245,247,
        1,0,0,0,246,244,1,0,0,0,247,248,5,39,0,0,248,249,3,110,55,0,249,
        250,5,71,0,0,250,3,1,0,0,0,251,253,5,32,0,0,252,254,5,45,0,0,253,
        252,1,0,0,0,253,254,1,0,0,0,254,255,1,0,0,0,255,258,3,110,55,0,256,
        257,5,73,0,0,257,259,5,91,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,
        260,1,0,0,0,260,261,5,71,0,0,261,5,1,0,0,0,262,264,3,10,5,0,263,
        262,1,0,0,0,264,267,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,
        268,1,0,0,0,267,265,1,0,0,0,268,299,3,14,7,0,269,271,3,10,5,0,270,
        269,1,0,0,0,271,274,1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,
        275,1,0,0,0,274,272,1,0,0,0,275,299,3,24,12,0,276,278,3,10,5,0,277,
        276,1,0,0,0,278,281,1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,
        282,1,0,0,0,281,279,1,0,0,0,282,299,3,32,16,0,283,285,3,10,5,0,284,
        283,1,0,0,0,285,288,1,0,0,0,286,284,1,0,0,0,286,287,1,0,0,0,287,
        289,1,0,0,0,288,286,1,0,0,0,289,299,3,126,63,0,290,292,3,10,5,0,
        291,290,1,0,0,0,292,295,1,0,0,0,293,291,1,0,0,0,293,294,1,0,0,0,
        294,296,1,0,0,0,295,293,1,0,0,0,296,299,3,34,17,0,297,299,5,71,0,
        0,298,265,1,0,0,0,298,272,1,0,0,0,298,279,1,0,0,0,298,286,1,0,0,
        0,298,293,1,0,0,0,298,297,1,0,0,0,299,7,1,0,0,0,300,306,3,10,5,0,
        301,306,5,37,0,0,302,306,5,49,0,0,303,306,5,53,0,0,304,306,5,56,
        0,0,305,300,1,0,0,0,305,301,1,0,0,0,305,302,1,0,0,0,305,303,1,0,
        0,0,305,304,1,0,0,0,306,9,1,0,0,0,307,318,3,114,57,0,308,318,5,42,
        0,0,309,318,5,41,0,0,310,318,5,40,0,0,311,318,5,45,0,0,312,318,5,
        8,0,0,313,318,5,25,0,0,314,318,5,46,0,0,315,318,5,3,0,0,316,318,
        5,4,0,0,317,307,1,0,0,0,317,308,1,0,0,0,317,309,1,0,0,0,317,310,
        1,0,0,0,317,311,1,0,0,0,317,312,1,0,0,0,317,313,1,0,0,0,317,314,
        1,0,0,0,317,315,1,0,0,0,317,316,1,0,0,0,318,11,1,0,0,0,319,322,5,
        25,0,0,320,322,3,114,57,0,321,319,1,0,0,0,321,320,1,0,0,0,322,13,
        1,0,0,0,323,324,5,16,0,0,324,326,5,110,0,0,325,327,3,18,9,0,326,
        325,1,0,0,0,326,327,1,0,0,0,327,330,1,0,0,0,328,329,5,24,0,0,329,
        331,3,84,42,0,330,328,1,0,0,0,330,331,1,0,0,0,331,334,1,0,0,0,332,
        333,5,31,0,0,333,335,3,42,21,0,334,332,1,0,0,0,334,335,1,0,0,0,335,
        337,1,0,0,0,336,338,3,16,8,0,337,336,1,0,0,0,337,338,1,0,0,0,338,
        339,1,0,0,0,339,340,3,44,22,0,340,15,1,0,0,0,341,342,5,5,0,0,342,
        343,3,42,21,0,343,17,1,0,0,0,344,345,5,76,0,0,345,350,3,20,10,0,
        346,347,5,72,0,0,347,349,3,20,10,0,348,346,1,0,0,0,349,352,1,0,0,
        0,350,348,1,0,0,0,350,351,1,0,0,0,351,353,1,0,0,0,352,350,1,0,0,
        0,353,354,5,75,0,0,354,19,1,0,0,0,355,357,3,114,57,0,356,355,1,0,
        0,0,357,360,1,0,0,0,358,356,1,0,0,0,358,359,1,0,0,0,359,361,1,0,
        0,0,360,358,1,0,0,0,361,364,5,110,0,0,362,363,5,24,0,0,363,365,3,
        22,11,0,364,362,1,0,0,0,364,365,1,0,0,0,365,21,1,0,0,0,366,371,3,
        84,42,0,367,368,5,93,0,0,368,370,3,84,42,0,369,367,1,0,0,0,370,373,
        1,0,0,0,371,369,1,0,0,0,371,372,1,0,0,0,372,23,1,0,0,0,373,371,1,
        0,0,0,374,375,5,23,0,0,375,378,5,110,0,0,376,377,5,31,0,0,377,379,
        3,42,21,0,378,376,1,0,0,0,378,379,1,0,0,0,379,380,1,0,0,0,380,382,
        5,67,0,0,381,383,3,26,13,0,382,381,1,0,0,0,382,383,1,0,0,0,383,385,
        1,0,0,0,384,386,5,72,0,0,385,384,1,0,0,0,385,386,1,0,0,0,386,388,
        1,0,0,0,387,389,3,30,15,0,388,387,1,0,0,0,388,389,1,0,0,0,389,390,
        1,0,0,0,390,391,5,68,0,0,391,25,1,0,0,0,392,397,3,28,14,0,393,394,
        5,72,0,0,394,396,3,28,14,0,395,393,1,0,0,0,396,399,1,0,0,0,397,395,
        1,0,0,0,397,398,1,0,0,0,398,27,1,0,0,0,399,397,1,0,0,0,400,402,3,
        114,57,0,401,400,1,0,0,0,402,405,1,0,0,0,403,401,1,0,0,0,403,404,
        1,0,0,0,404,406,1,0,0,0,405,403,1,0,0,0,406,408,5,110,0,0,407,409,
        3,222,111,0,408,407,1,0,0,0,408,409,1,0,0,0,409,411,1,0,0,0,410,
        412,3,44,22,0,411,410,1,0,0,0,411,412,1,0,0,0,412,29,1,0,0,0,413,
        417,5,71,0,0,414,416,3,48,24,0,415,414,1,0,0,0,416,419,1,0,0,0,417,
        415,1,0,0,0,417,418,1,0,0,0,418,31,1,0,0,0,419,417,1,0,0,0,420,421,
        5,35,0,0,421,423,5,110,0,0,422,424,3,18,9,0,423,422,1,0,0,0,423,
        424,1,0,0,0,424,427,1,0,0,0,425,426,5,24,0,0,426,428,3,42,21,0,427,
        425,1,0,0,0,427,428,1,0,0,0,428,430,1,0,0,0,429,431,3,16,8,0,430,
        429,1,0,0,0,430,431,1,0,0,0,431,432,1,0,0,0,432,433,3,46,23,0,433,
        33,1,0,0,0,434,435,5,2,0,0,435,437,5,110,0,0,436,438,3,18,9,0,437,
        436,1,0,0,0,437,438,1,0,0,0,438,439,1,0,0,0,439,441,5,65,0,0,440,
        442,3,36,18,0,441,440,1,0,0,0,441,442,1,0,0,0,442,443,1,0,0,0,443,
        446,5,66,0,0,444,445,5,31,0,0,445,447,3,42,21,0,446,444,1,0,0,0,
        446,447,1,0,0,0,447,448,1,0,0,0,448,449,3,40,20,0,449,35,1,0,0,0,
        450,455,3,38,19,0,451,452,5,72,0,0,452,454,3,38,19,0,453,451,1,0,
        0,0,454,457,1,0,0,0,455,453,1,0,0,0,455,456,1,0,0,0,456,37,1,0,0,
        0,457,455,1,0,0,0,458,459,3,84,42,0,459,460,3,78,39,0,460,39,1,0,
        0,0,461,465,5,67,0,0,462,464,3,48,24,0,463,462,1,0,0,0,464,467,1,
        0,0,0,465,463,1,0,0,0,465,466,1,0,0,0,466,468,1,0,0,0,467,465,1,
        0,0,0,468,469,5,68,0,0,469,41,1,0,0,0,470,475,3,84,42,0,471,472,
        5,72,0,0,472,474,3,84,42,0,473,471,1,0,0,0,474,477,1,0,0,0,475,473,
        1,0,0,0,475,476,1,0,0,0,476,43,1,0,0,0,477,475,1,0,0,0,478,482,5,
        67,0,0,479,481,3,48,24,0,480,479,1,0,0,0,481,484,1,0,0,0,482,480,
        1,0,0,0,482,483,1,0,0,0,483,485,1,0,0,0,484,482,1,0,0,0,485,486,
        5,68,0,0,486,45,1,0,0,0,487,491,5,67,0,0,488,490,3,62,31,0,489,488,
        1,0,0,0,490,493,1,0,0,0,491,489,1,0,0,0,491,492,1,0,0,0,492,494,
        1,0,0,0,493,491,1,0,0,0,494,495,5,68,0,0,495,47,1,0,0,0,496,509,
        5,71,0,0,497,499,5,45,0,0,498,497,1,0,0,0,498,499,1,0,0,0,499,500,
        1,0,0,0,500,509,3,142,71,0,501,503,3,8,4,0,502,501,1,0,0,0,503,506,
        1,0,0,0,504,502,1,0,0,0,504,505,1,0,0,0,505,507,1,0,0,0,506,504,
        1,0,0,0,507,509,3,50,25,0,508,496,1,0,0,0,508,498,1,0,0,0,508,504,
        1,0,0,0,509,49,1,0,0,0,510,520,3,52,26,0,511,520,3,54,27,0,512,520,
        3,60,30,0,513,520,3,56,28,0,514,520,3,58,29,0,515,520,3,32,16,0,
        516,520,3,126,63,0,517,520,3,14,7,0,518,520,3,24,12,0,519,510,1,
        0,0,0,519,511,1,0,0,0,519,512,1,0,0,0,519,513,1,0,0,0,519,514,1,
        0,0,0,519,515,1,0,0,0,519,516,1,0,0,0,519,517,1,0,0,0,519,518,1,
        0,0,0,520,51,1,0,0,0,521,524,3,84,42,0,522,524,5,55,0,0,523,521,
        1,0,0,0,523,522,1,0,0,0,524,525,1,0,0,0,525,526,5,110,0,0,526,531,
        3,98,49,0,527,528,5,69,0,0,528,530,5,70,0,0,529,527,1,0,0,0,530,
        533,1,0,0,0,531,529,1,0,0,0,531,532,1,0,0,0,532,536,1,0,0,0,533,
        531,1,0,0,0,534,535,5,52,0,0,535,537,3,96,48,0,536,534,1,0,0,0,536,
        537,1,0,0,0,537,540,1,0,0,0,538,541,3,106,53,0,539,541,5,71,0,0,
        540,538,1,0,0,0,540,539,1,0,0,0,541,53,1,0,0,0,542,543,3,18,9,0,
        543,544,3,52,26,0,544,55,1,0,0,0,545,546,5,110,0,0,546,549,3,98,
        49,0,547,548,5,52,0,0,548,550,3,96,48,0,549,547,1,0,0,0,549,550,
        1,0,0,0,550,551,1,0,0,0,551,552,3,108,54,0,552,57,1,0,0,0,553,554,
        3,18,9,0,554,555,3,56,28,0,555,59,1,0,0,0,556,557,3,84,42,0,557,
        558,3,74,37,0,558,559,5,71,0,0,559,61,1,0,0,0,560,562,3,8,4,0,561,
        560,1,0,0,0,562,565,1,0,0,0,563,561,1,0,0,0,563,564,1,0,0,0,564,
        566,1,0,0,0,565,563,1,0,0,0,566,569,3,64,32,0,567,569,5,71,0,0,568,
        563,1,0,0,0,568,567,1,0,0,0,569,63,1,0,0,0,570,578,3,66,33,0,571,
        578,3,70,35,0,572,578,3,72,36,0,573,578,3,32,16,0,574,578,3,126,
        63,0,575,578,3,14,7,0,576,578,3,24,12,0,577,570,1,0,0,0,577,571,
        1,0,0,0,577,572,1,0,0,0,577,573,1,0,0,0,577,574,1,0,0,0,577,575,
        1,0,0,0,577,576,1,0,0,0,578,65,1,0,0,0,579,580,3,84,42,0,580,585,
        3,68,34,0,581,582,5,72,0,0,582,584,3,68,34,0,583,581,1,0,0,0,584,
        587,1,0,0,0,585,583,1,0,0,0,585,586,1,0,0,0,586,588,1,0,0,0,587,
        585,1,0,0,0,588,589,5,71,0,0,589,67,1,0,0,0,590,595,5,110,0,0,591,
        592,5,69,0,0,592,594,5,70,0,0,593,591,1,0,0,0,594,597,1,0,0,0,595,
        593,1,0,0,0,595,596,1,0,0,0,596,598,1,0,0,0,597,595,1,0,0,0,598,
        599,5,74,0,0,599,600,3,80,40,0,600,69,1,0,0,0,601,604,5,19,0,0,602,
        604,3,8,4,0,603,601,1,0,0,0,603,602,1,0,0,0,604,607,1,0,0,0,605,
        603,1,0,0,0,605,606,1,0,0,0,606,609,1,0,0,0,607,605,1,0,0,0,608,
        610,3,18,9,0,609,608,1,0,0,0,609,610,1,0,0,0,610,613,1,0,0,0,611,
        614,3,84,42,0,612,614,5,55,0,0,613,611,1,0,0,0,613,612,1,0,0,0,614,
        615,1,0,0,0,615,616,5,110,0,0,616,617,1,0,0,0,617,622,3,98,49,0,
        618,619,5,69,0,0,619,621,5,70,0,0,620,618,1,0,0,0,621,624,1,0,0,
        0,622,620,1,0,0,0,622,623,1,0,0,0,623,627,1,0,0,0,624,622,1,0,0,
        0,625,626,5,52,0,0,626,628,3,96,48,0,627,625,1,0,0,0,627,628,1,0,
        0,0,628,631,1,0,0,0,629,632,3,106,53,0,630,632,5,71,0,0,631,629,
        1,0,0,0,631,630,1,0,0,0,632,71,1,0,0,0,633,634,3,18,9,0,634,635,
        3,70,35,0,635,73,1,0,0,0,636,641,3,76,38,0,637,638,5,72,0,0,638,
        640,3,76,38,0,639,637,1,0,0,0,640,643,1,0,0,0,641,639,1,0,0,0,641,
        642,1,0,0,0,642,75,1,0,0,0,643,641,1,0,0,0,644,647,3,78,39,0,645,
        646,5,74,0,0,646,648,3,80,40,0,647,645,1,0,0,0,647,648,1,0,0,0,648,
        77,1,0,0,0,649,654,7,0,0,0,650,651,5,69,0,0,651,653,5,70,0,0,652,
        650,1,0,0,0,653,656,1,0,0,0,654,652,1,0,0,0,654,655,1,0,0,0,655,
        79,1,0,0,0,656,654,1,0,0,0,657,660,3,82,41,0,658,660,3,186,93,0,
        659,657,1,0,0,0,659,658,1,0,0,0,660,81,1,0,0,0,661,673,5,67,0,0,
        662,667,3,80,40,0,663,664,5,72,0,0,664,666,3,80,40,0,665,663,1,0,
        0,0,666,669,1,0,0,0,667,665,1,0,0,0,667,668,1,0,0,0,668,671,1,0,
        0,0,669,667,1,0,0,0,670,672,5,72,0,0,671,670,1,0,0,0,671,672,1,0,
        0,0,672,674,1,0,0,0,673,662,1,0,0,0,673,674,1,0,0,0,674,675,1,0,
        0,0,675,676,5,68,0,0,676,83,1,0,0,0,677,682,3,86,43,0,678,679,5,
        69,0,0,679,681,5,70,0,0,680,678,1,0,0,0,681,684,1,0,0,0,682,680,
        1,0,0,0,682,683,1,0,0,0,683,694,1,0,0,0,684,682,1,0,0,0,685,690,
        3,88,44,0,686,687,5,69,0,0,687,689,5,70,0,0,688,686,1,0,0,0,689,
        692,1,0,0,0,690,688,1,0,0,0,690,691,1,0,0,0,691,694,1,0,0,0,692,
        690,1,0,0,0,693,677,1,0,0,0,693,685,1,0,0,0,694,85,1,0,0,0,695,697,
        5,110,0,0,696,698,3,90,45,0,697,696,1,0,0,0,697,698,1,0,0,0,698,
        706,1,0,0,0,699,700,5,73,0,0,700,702,5,110,0,0,701,703,3,90,45,0,
        702,701,1,0,0,0,702,703,1,0,0,0,703,705,1,0,0,0,704,699,1,0,0,0,
        705,708,1,0,0,0,706,704,1,0,0,0,706,707,1,0,0,0,707,87,1,0,0,0,708,
        706,1,0,0,0,709,710,7,1,0,0,710,89,1,0,0,0,711,712,5,76,0,0,712,
        717,3,92,46,0,713,714,5,72,0,0,714,716,3,92,46,0,715,713,1,0,0,0,
        716,719,1,0,0,0,717,715,1,0,0,0,717,718,1,0,0,0,718,720,1,0,0,0,
        719,717,1,0,0,0,720,721,5,75,0,0,721,91,1,0,0,0,722,724,3,114,57,
        0,723,722,1,0,0,0,723,724,1,0,0,0,724,725,1,0,0,0,725,726,3,94,47,
        0,726,93,1,0,0,0,727,734,3,84,42,0,728,731,5,79,0,0,729,730,7,2,
        0,0,730,732,3,84,42,0,731,729,1,0,0,0,731,732,1,0,0,0,732,734,1,
        0,0,0,733,727,1,0,0,0,733,728,1,0,0,0,734,95,1,0,0,0,735,740,3,110,
        55,0,736,737,5,72,0,0,737,739,3,110,55,0,738,736,1,0,0,0,739,742,
        1,0,0,0,740,738,1,0,0,0,740,741,1,0,0,0,741,97,1,0,0,0,742,740,1,
        0,0,0,743,745,5,65,0,0,744,746,3,100,50,0,745,744,1,0,0,0,745,746,
        1,0,0,0,746,747,1,0,0,0,747,748,5,66,0,0,748,99,1,0,0,0,749,754,
        3,102,51,0,750,751,5,72,0,0,751,753,3,102,51,0,752,750,1,0,0,0,753,
        756,1,0,0,0,754,752,1,0,0,0,754,755,1,0,0,0,755,759,1,0,0,0,756,
        754,1,0,0,0,757,758,5,72,0,0,758,760,3,104,52,0,759,757,1,0,0,0,
        759,760,1,0,0,0,760,763,1,0,0,0,761,763,3,104,52,0,762,749,1,0,0,
        0,762,761,1,0,0,0,763,101,1,0,0,0,764,766,3,12,6,0,765,764,1,0,0,
        0,766,769,1,0,0,0,767,765,1,0,0,0,767,768,1,0,0,0,768,772,1,0,0,
        0,769,767,1,0,0,0,770,773,3,84,42,0,771,773,5,1,0,0,772,770,1,0,
        0,0,772,771,1,0,0,0,773,774,1,0,0,0,774,775,3,78,39,0,775,103,1,
        0,0,0,776,778,3,12,6,0,777,776,1,0,0,0,778,781,1,0,0,0,779,777,1,
        0,0,0,779,780,1,0,0,0,780,782,1,0,0,0,781,779,1,0,0,0,782,783,3,
        84,42,0,783,784,5,113,0,0,784,785,3,78,39,0,785,105,1,0,0,0,786,
        787,3,142,71,0,787,107,1,0,0,0,788,789,3,142,71,0,789,109,1,0,0,
        0,790,795,5,110,0,0,791,792,5,73,0,0,792,794,5,110,0,0,793,791,1,
        0,0,0,794,797,1,0,0,0,795,793,1,0,0,0,795,796,1,0,0,0,796,111,1,
        0,0,0,797,795,1,0,0,0,798,799,7,3,0,0,799,113,1,0,0,0,800,801,5,
        112,0,0,801,808,3,116,58,0,802,805,5,65,0,0,803,806,3,118,59,0,804,
        806,3,122,61,0,805,803,1,0,0,0,805,804,1,0,0,0,805,806,1,0,0,0,806,
        807,1,0,0,0,807,809,5,66,0,0,808,802,1,0,0,0,808,809,1,0,0,0,809,
        115,1,0,0,0,810,811,3,110,55,0,811,117,1,0,0,0,812,817,3,120,60,
        0,813,814,5,72,0,0,814,816,3,120,60,0,815,813,1,0,0,0,816,819,1,
        0,0,0,817,815,1,0,0,0,817,818,1,0,0,0,818,119,1,0,0,0,819,817,1,
        0,0,0,820,821,5,110,0,0,821,822,5,74,0,0,822,823,3,122,61,0,823,
        121,1,0,0,0,824,828,3,186,93,0,825,828,3,114,57,0,826,828,3,124,
        62,0,827,824,1,0,0,0,827,825,1,0,0,0,827,826,1,0,0,0,828,123,1,0,
        0,0,829,838,5,67,0,0,830,835,3,122,61,0,831,832,5,72,0,0,832,834,
        3,122,61,0,833,831,1,0,0,0,834,837,1,0,0,0,835,833,1,0,0,0,835,836,
        1,0,0,0,836,839,1,0,0,0,837,835,1,0,0,0,838,830,1,0,0,0,838,839,
        1,0,0,0,839,841,1,0,0,0,840,842,5,72,0,0,841,840,1,0,0,0,841,842,
        1,0,0,0,842,843,1,0,0,0,843,844,5,68,0,0,844,125,1,0,0,0,845,846,
        5,112,0,0,846,847,5,35,0,0,847,848,5,110,0,0,848,849,3,128,64,0,
        849,127,1,0,0,0,850,854,5,67,0,0,851,853,3,130,65,0,852,851,1,0,
        0,0,853,856,1,0,0,0,854,852,1,0,0,0,854,855,1,0,0,0,855,857,1,0,
        0,0,856,854,1,0,0,0,857,858,5,68,0,0,858,129,1,0,0,0,859,861,3,8,
        4,0,860,859,1,0,0,0,861,864,1,0,0,0,862,860,1,0,0,0,862,863,1,0,
        0,0,863,865,1,0,0,0,864,862,1,0,0,0,865,868,3,132,66,0,866,868,5,
        71,0,0,867,862,1,0,0,0,867,866,1,0,0,0,868,131,1,0,0,0,869,870,3,
        84,42,0,870,871,3,134,67,0,871,872,5,71,0,0,872,890,1,0,0,0,873,
        875,3,14,7,0,874,876,5,71,0,0,875,874,1,0,0,0,875,876,1,0,0,0,876,
        890,1,0,0,0,877,879,3,32,16,0,878,880,5,71,0,0,879,878,1,0,0,0,879,
        880,1,0,0,0,880,890,1,0,0,0,881,883,3,24,12,0,882,884,5,71,0,0,883,
        882,1,0,0,0,883,884,1,0,0,0,884,890,1,0,0,0,885,887,3,126,63,0,886,
        888,5,71,0,0,887,886,1,0,0,0,887,888,1,0,0,0,888,890,1,0,0,0,889,
        869,1,0,0,0,889,873,1,0,0,0,889,877,1,0,0,0,889,881,1,0,0,0,889,
        885,1,0,0,0,890,133,1,0,0,0,891,894,3,136,68,0,892,894,3,138,69,
        0,893,891,1,0,0,0,893,892,1,0,0,0,894,135,1,0,0,0,895,896,5,110,
        0,0,896,897,5,65,0,0,897,899,5,66,0,0,898,900,3,140,70,0,899,898,
        1,0,0,0,899,900,1,0,0,0,900,137,1,0,0,0,901,902,3,74,37,0,902,139,
        1,0,0,0,903,904,5,19,0,0,904,905,3,122,61,0,905,141,1,0,0,0,906,
        910,5,67,0,0,907,909,3,144,72,0,908,907,1,0,0,0,909,912,1,0,0,0,
        910,908,1,0,0,0,910,911,1,0,0,0,911,913,1,0,0,0,912,910,1,0,0,0,
        913,914,5,68,0,0,914,143,1,0,0,0,915,919,3,146,73,0,916,919,3,150,
        75,0,917,919,3,6,3,0,918,915,1,0,0,0,918,916,1,0,0,0,918,917,1,0,
        0,0,919,145,1,0,0,0,920,921,3,148,74,0,921,922,5,71,0,0,922,147,
        1,0,0,0,923,925,3,12,6,0,924,923,1,0,0,0,925,928,1,0,0,0,926,924,
        1,0,0,0,926,927,1,0,0,0,927,931,1,0,0,0,928,926,1,0,0,0,929,932,
        3,84,42,0,930,932,5,1,0,0,931,929,1,0,0,0,931,930,1,0,0,0,932,933,
        1,0,0,0,933,934,3,74,37,0,934,149,1,0,0,0,935,1038,3,142,71,0,936,
        937,5,9,0,0,937,940,3,186,93,0,938,939,5,80,0,0,939,941,3,186,93,
        0,940,938,1,0,0,0,940,941,1,0,0,0,941,942,1,0,0,0,942,943,5,71,0,
        0,943,1038,1,0,0,0,944,945,5,29,0,0,945,946,3,176,88,0,946,949,3,
        150,75,0,947,948,5,22,0,0,948,950,3,150,75,0,949,947,1,0,0,0,949,
        950,1,0,0,0,950,1038,1,0,0,0,951,952,5,28,0,0,952,953,5,65,0,0,953,
        954,3,168,84,0,954,955,5,66,0,0,955,956,3,150,75,0,956,1038,1,0,
        0,0,957,958,5,57,0,0,958,959,3,176,88,0,959,960,3,150,75,0,960,1038,
        1,0,0,0,961,962,5,20,0,0,962,963,3,150,75,0,963,964,5,57,0,0,964,
        965,3,176,88,0,965,966,5,71,0,0,966,1038,1,0,0,0,967,968,5,54,0,
        0,968,978,3,142,71,0,969,971,3,152,76,0,970,969,1,0,0,0,971,972,
        1,0,0,0,972,970,1,0,0,0,972,973,1,0,0,0,973,975,1,0,0,0,974,976,
        3,156,78,0,975,974,1,0,0,0,975,976,1,0,0,0,976,979,1,0,0,0,977,979,
        3,156,78,0,978,970,1,0,0,0,978,977,1,0,0,0,979,1038,1,0,0,0,980,
        981,5,54,0,0,981,982,3,158,79,0,982,986,3,142,71,0,983,985,3,152,
        76,0,984,983,1,0,0,0,985,988,1,0,0,0,986,984,1,0,0,0,986,987,1,0,
        0,0,987,990,1,0,0,0,988,986,1,0,0,0,989,991,3,156,78,0,990,989,1,
        0,0,0,990,991,1,0,0,0,991,1038,1,0,0,0,992,993,5,48,0,0,993,994,
        3,176,88,0,994,998,5,67,0,0,995,997,3,164,82,0,996,995,1,0,0,0,997,
        1000,1,0,0,0,998,996,1,0,0,0,998,999,1,0,0,0,999,1001,1,0,0,0,1000,
        998,1,0,0,0,1001,1002,5,68,0,0,1002,1038,1,0,0,0,1003,1004,5,49,
        0,0,1004,1005,3,176,88,0,1005,1006,3,142,71,0,1006,1038,1,0,0,0,
        1007,1009,5,43,0,0,1008,1010,3,186,93,0,1009,1008,1,0,0,0,1009,1010,
        1,0,0,0,1010,1011,1,0,0,0,1011,1038,5,71,0,0,1012,1013,5,51,0,0,
        1013,1014,3,186,93,0,1014,1015,5,71,0,0,1015,1038,1,0,0,0,1016,1018,
        5,11,0,0,1017,1019,5,110,0,0,1018,1017,1,0,0,0,1018,1019,1,0,0,0,
        1019,1020,1,0,0,0,1020,1038,5,71,0,0,1021,1023,5,18,0,0,1022,1024,
        5,110,0,0,1023,1022,1,0,0,0,1023,1024,1,0,0,0,1024,1025,1,0,0,0,
        1025,1038,5,71,0,0,1026,1027,5,6,0,0,1027,1028,3,186,93,0,1028,1029,
        5,71,0,0,1029,1038,1,0,0,0,1030,1038,5,71,0,0,1031,1032,3,180,90,
        0,1032,1033,5,71,0,0,1033,1038,1,0,0,0,1034,1035,5,110,0,0,1035,
        1036,5,80,0,0,1036,1038,3,150,75,0,1037,935,1,0,0,0,1037,936,1,0,
        0,0,1037,944,1,0,0,0,1037,951,1,0,0,0,1037,957,1,0,0,0,1037,961,
        1,0,0,0,1037,967,1,0,0,0,1037,980,1,0,0,0,1037,992,1,0,0,0,1037,
        1003,1,0,0,0,1037,1007,1,0,0,0,1037,1012,1,0,0,0,1037,1016,1,0,0,
        0,1037,1021,1,0,0,0,1037,1026,1,0,0,0,1037,1030,1,0,0,0,1037,1031,
        1,0,0,0,1037,1034,1,0,0,0,1038,151,1,0,0,0,1039,1040,5,14,0,0,1040,
        1044,5,65,0,0,1041,1043,3,12,6,0,1042,1041,1,0,0,0,1043,1046,1,0,
        0,0,1044,1042,1,0,0,0,1044,1045,1,0,0,0,1045,1047,1,0,0,0,1046,1044,
        1,0,0,0,1047,1048,3,154,77,0,1048,1049,5,110,0,0,1049,1050,5,66,
        0,0,1050,1051,3,142,71,0,1051,153,1,0,0,0,1052,1057,3,110,55,0,1053,
        1054,5,94,0,0,1054,1056,3,110,55,0,1055,1053,1,0,0,0,1056,1059,1,
        0,0,0,1057,1055,1,0,0,0,1057,1058,1,0,0,0,1058,155,1,0,0,0,1059,
        1057,1,0,0,0,1060,1061,5,26,0,0,1061,1062,3,142,71,0,1062,157,1,
        0,0,0,1063,1064,5,65,0,0,1064,1066,3,160,80,0,1065,1067,5,71,0,0,
        1066,1065,1,0,0,0,1066,1067,1,0,0,0,1067,1068,1,0,0,0,1068,1069,
        5,66,0,0,1069,159,1,0,0,0,1070,1075,3,162,81,0,1071,1072,5,71,0,
        0,1072,1074,3,162,81,0,1073,1071,1,0,0,0,1074,1077,1,0,0,0,1075,
        1073,1,0,0,0,1075,1076,1,0,0,0,1076,161,1,0,0,0,1077,1075,1,0,0,
        0,1078,1080,3,12,6,0,1079,1078,1,0,0,0,1080,1083,1,0,0,0,1081,1079,
        1,0,0,0,1081,1082,1,0,0,0,1082,1084,1,0,0,0,1083,1081,1,0,0,0,1084,
        1085,3,86,43,0,1085,1086,3,78,39,0,1086,1087,5,74,0,0,1087,1088,
        3,186,93,0,1088,163,1,0,0,0,1089,1091,3,166,83,0,1090,1089,1,0,0,
        0,1091,1092,1,0,0,0,1092,1090,1,0,0,0,1092,1093,1,0,0,0,1093,1103,
        1,0,0,0,1094,1098,5,80,0,0,1095,1097,3,144,72,0,1096,1095,1,0,0,
        0,1097,1100,1,0,0,0,1098,1096,1,0,0,0,1098,1099,1,0,0,0,1099,1104,
        1,0,0,0,1100,1098,1,0,0,0,1101,1102,5,97,0,0,1102,1104,3,150,75,
        0,1103,1094,1,0,0,0,1103,1101,1,0,0,0,1104,165,1,0,0,0,1105,1108,
        5,13,0,0,1106,1109,3,184,92,0,1107,1109,3,182,91,0,1108,1106,1,0,
        0,0,1108,1107,1,0,0,0,1109,1112,1,0,0,0,1110,1111,5,7,0,0,1111,1113,
        3,186,93,0,1112,1110,1,0,0,0,1112,1113,1,0,0,0,1113,1116,1,0,0,0,
        1114,1116,5,19,0,0,1115,1105,1,0,0,0,1115,1114,1,0,0,0,1116,167,
        1,0,0,0,1117,1130,3,172,86,0,1118,1120,3,170,85,0,1119,1118,1,0,
        0,0,1119,1120,1,0,0,0,1120,1121,1,0,0,0,1121,1123,5,71,0,0,1122,
        1124,3,186,93,0,1123,1122,1,0,0,0,1123,1124,1,0,0,0,1124,1125,1,
        0,0,0,1125,1127,5,71,0,0,1126,1128,3,174,87,0,1127,1126,1,0,0,0,
        1127,1128,1,0,0,0,1128,1130,1,0,0,0,1129,1117,1,0,0,0,1129,1119,
        1,0,0,0,1130,169,1,0,0,0,1131,1134,3,148,74,0,1132,1134,3,178,89,
        0,1133,1131,1,0,0,0,1133,1132,1,0,0,0,1134,171,1,0,0,0,1135,1137,
        3,12,6,0,1136,1135,1,0,0,0,1137,1140,1,0,0,0,1138,1136,1,0,0,0,1138,
        1139,1,0,0,0,1139,1143,1,0,0,0,1140,1138,1,0,0,0,1141,1144,3,84,
        42,0,1142,1144,5,1,0,0,1143,1141,1,0,0,0,1143,1142,1,0,0,0,1144,
        1145,1,0,0,0,1145,1146,3,78,39,0,1146,1147,5,80,0,0,1147,1148,3,
        186,93,0,1148,173,1,0,0,0,1149,1150,3,178,89,0,1150,175,1,0,0,0,
        1151,1152,5,65,0,0,1152,1153,3,186,93,0,1153,1154,5,66,0,0,1154,
        177,1,0,0,0,1155,1160,3,186,93,0,1156,1157,5,72,0,0,1157,1159,3,
        186,93,0,1158,1156,1,0,0,0,1159,1162,1,0,0,0,1160,1158,1,0,0,0,1160,
        1161,1,0,0,0,1161,179,1,0,0,0,1162,1160,1,0,0,0,1163,1164,3,186,
        93,0,1164,181,1,0,0,0,1165,1166,3,186,93,0,1166,183,1,0,0,0,1167,
        1175,3,84,42,0,1168,1170,3,114,57,0,1169,1168,1,0,0,0,1170,1173,
        1,0,0,0,1171,1169,1,0,0,0,1171,1172,1,0,0,0,1172,1174,1,0,0,0,1173,
        1171,1,0,0,0,1174,1176,5,110,0,0,1175,1171,1,0,0,0,1175,1176,1,0,
        0,0,1176,185,1,0,0,0,1177,1178,6,93,-1,0,1178,1191,3,188,94,0,1179,
        1180,5,38,0,0,1180,1191,3,200,100,0,1181,1182,5,65,0,0,1182,1183,
        3,84,42,0,1183,1184,5,66,0,0,1184,1185,3,186,93,18,1185,1191,1,0,
        0,0,1186,1187,7,4,0,0,1187,1191,3,186,93,17,1188,1191,3,192,96,0,
        1189,1191,3,190,95,0,1190,1177,1,0,0,0,1190,1179,1,0,0,0,1190,1181,
        1,0,0,0,1190,1186,1,0,0,0,1190,1188,1,0,0,0,1190,1189,1,0,0,0,1191,
        1283,1,0,0,0,1192,1193,10,15,0,0,1193,1194,7,5,0,0,1194,1282,3,186,
        93,16,1195,1196,10,14,0,0,1196,1197,7,6,0,0,1197,1282,3,186,93,15,
        1198,1206,10,13,0,0,1199,1200,5,76,0,0,1200,1207,5,76,0,0,1201,1202,
        5,75,0,0,1202,1203,5,75,0,0,1203,1207,5,75,0,0,1204,1205,5,75,0,
        0,1205,1207,5,75,0,0,1206,1199,1,0,0,0,1206,1201,1,0,0,0,1206,1204,
        1,0,0,0,1207,1208,1,0,0,0,1208,1282,3,186,93,14,1209,1210,10,12,
        0,0,1210,1211,7,7,0,0,1211,1282,3,186,93,13,1212,1213,10,10,0,0,
        1213,1214,7,8,0,0,1214,1282,3,186,93,11,1215,1216,10,9,0,0,1216,
        1217,5,93,0,0,1217,1282,3,186,93,10,1218,1219,10,8,0,0,1219,1220,
        5,95,0,0,1220,1282,3,186,93,9,1221,1222,10,7,0,0,1222,1223,5,94,
        0,0,1223,1282,3,186,93,8,1224,1225,10,6,0,0,1225,1226,5,85,0,0,1226,
        1282,3,186,93,7,1227,1228,10,5,0,0,1228,1229,5,86,0,0,1229,1282,
        3,186,93,6,1230,1231,10,4,0,0,1231,1232,5,79,0,0,1232,1233,3,186,
        93,0,1233,1234,5,80,0,0,1234,1235,3,186,93,5,1235,1282,1,0,0,0,1236,
        1237,10,1,0,0,1237,1238,7,9,0,0,1238,1282,3,186,93,1,1239,1240,10,
        27,0,0,1240,1241,5,73,0,0,1241,1282,5,110,0,0,1242,1243,10,26,0,
        0,1243,1244,5,73,0,0,1244,1282,5,50,0,0,1245,1246,10,25,0,0,1246,
        1247,5,73,0,0,1247,1249,5,38,0,0,1248,1250,3,212,106,0,1249,1248,
        1,0,0,0,1249,1250,1,0,0,0,1250,1251,1,0,0,0,1251,1282,3,204,102,
        0,1252,1253,10,24,0,0,1253,1254,5,73,0,0,1254,1255,5,47,0,0,1255,
        1282,3,218,109,0,1256,1257,10,23,0,0,1257,1258,5,73,0,0,1258,1282,
        3,210,105,0,1259,1260,10,22,0,0,1260,1262,5,98,0,0,1261,1263,3,90,
        45,0,1262,1261,1,0,0,0,1262,1263,1,0,0,0,1263,1264,1,0,0,0,1264,
        1282,7,10,0,0,1265,1266,10,21,0,0,1266,1267,5,69,0,0,1267,1268,3,
        186,93,0,1268,1269,5,70,0,0,1269,1282,1,0,0,0,1270,1271,10,20,0,
        0,1271,1273,5,65,0,0,1272,1274,3,178,89,0,1273,1272,1,0,0,0,1273,
        1274,1,0,0,0,1274,1275,1,0,0,0,1275,1282,5,66,0,0,1276,1277,10,16,
        0,0,1277,1282,7,11,0,0,1278,1279,10,11,0,0,1279,1280,5,33,0,0,1280,
        1282,3,184,92,0,1281,1192,1,0,0,0,1281,1195,1,0,0,0,1281,1198,1,
        0,0,0,1281,1209,1,0,0,0,1281,1212,1,0,0,0,1281,1215,1,0,0,0,1281,
        1218,1,0,0,0,1281,1221,1,0,0,0,1281,1224,1,0,0,0,1281,1227,1,0,0,
        0,1281,1230,1,0,0,0,1281,1236,1,0,0,0,1281,1239,1,0,0,0,1281,1242,
        1,0,0,0,1281,1245,1,0,0,0,1281,1252,1,0,0,0,1281,1256,1,0,0,0,1281,
        1259,1,0,0,0,1281,1265,1,0,0,0,1281,1270,1,0,0,0,1281,1276,1,0,0,
        0,1281,1278,1,0,0,0,1282,1285,1,0,0,0,1283,1281,1,0,0,0,1283,1284,
        1,0,0,0,1284,187,1,0,0,0,1285,1283,1,0,0,0,1286,1287,5,65,0,0,1287,
        1288,3,186,93,0,1288,1289,5,66,0,0,1289,1315,1,0,0,0,1290,1315,5,
        50,0,0,1291,1315,5,47,0,0,1292,1315,3,112,56,0,1293,1315,5,110,0,
        0,1294,1295,3,84,42,0,1295,1296,5,73,0,0,1296,1297,5,16,0,0,1297,
        1315,1,0,0,0,1298,1299,5,55,0,0,1299,1300,5,73,0,0,1300,1315,5,16,
        0,0,1301,1305,3,212,106,0,1302,1306,3,220,110,0,1303,1304,5,50,0,
        0,1304,1306,3,222,111,0,1305,1302,1,0,0,0,1305,1303,1,0,0,0,1306,
        1315,1,0,0,0,1307,1308,3,84,42,0,1308,1310,5,98,0,0,1309,1311,3,
        90,45,0,1310,1309,1,0,0,0,1310,1311,1,0,0,0,1311,1312,1,0,0,0,1312,
        1313,7,10,0,0,1313,1315,1,0,0,0,1314,1286,1,0,0,0,1314,1290,1,0,
        0,0,1314,1291,1,0,0,0,1314,1292,1,0,0,0,1314,1293,1,0,0,0,1314,1294,
        1,0,0,0,1314,1298,1,0,0,0,1314,1301,1,0,0,0,1314,1307,1,0,0,0,1315,
        189,1,0,0,0,1316,1317,5,48,0,0,1317,1318,3,176,88,0,1318,1322,5,
        67,0,0,1319,1321,3,164,82,0,1320,1319,1,0,0,0,1321,1324,1,0,0,0,
        1322,1320,1,0,0,0,1322,1323,1,0,0,0,1323,1325,1,0,0,0,1324,1322,
        1,0,0,0,1325,1326,5,68,0,0,1326,191,1,0,0,0,1327,1328,3,194,97,0,
        1328,1329,5,97,0,0,1329,1330,3,198,99,0,1330,193,1,0,0,0,1331,1372,
        5,110,0,0,1332,1334,5,65,0,0,1333,1335,3,100,50,0,1334,1333,1,0,
        0,0,1334,1335,1,0,0,0,1335,1336,1,0,0,0,1336,1372,5,66,0,0,1337,
        1338,5,65,0,0,1338,1339,3,196,98,0,1339,1340,5,66,0,0,1340,1372,
        1,0,0,0,1341,1345,5,65,0,0,1342,1344,3,12,6,0,1343,1342,1,0,0,0,
        1344,1347,1,0,0,0,1345,1343,1,0,0,0,1345,1346,1,0,0,0,1346,1350,
        1,0,0,0,1347,1345,1,0,0,0,1348,1351,3,84,42,0,1349,1351,5,1,0,0,
        1350,1348,1,0,0,0,1350,1349,1,0,0,0,1351,1352,1,0,0,0,1352,1367,
        5,110,0,0,1353,1357,5,72,0,0,1354,1356,3,12,6,0,1355,1354,1,0,0,
        0,1356,1359,1,0,0,0,1357,1355,1,0,0,0,1357,1358,1,0,0,0,1358,1362,
        1,0,0,0,1359,1357,1,0,0,0,1360,1363,3,84,42,0,1361,1363,5,1,0,0,
        1362,1360,1,0,0,0,1362,1361,1,0,0,0,1363,1364,1,0,0,0,1364,1366,
        5,110,0,0,1365,1353,1,0,0,0,1366,1369,1,0,0,0,1367,1365,1,0,0,0,
        1367,1368,1,0,0,0,1368,1370,1,0,0,0,1369,1367,1,0,0,0,1370,1372,
        5,66,0,0,1371,1331,1,0,0,0,1371,1332,1,0,0,0,1371,1337,1,0,0,0,1371,
        1341,1,0,0,0,1372,195,1,0,0,0,1373,1378,5,110,0,0,1374,1375,5,72,
        0,0,1375,1377,5,110,0,0,1376,1374,1,0,0,0,1377,1380,1,0,0,0,1378,
        1376,1,0,0,0,1378,1379,1,0,0,0,1379,197,1,0,0,0,1380,1378,1,0,0,
        0,1381,1384,3,186,93,0,1382,1384,3,142,71,0,1383,1381,1,0,0,0,1383,
        1382,1,0,0,0,1384,199,1,0,0,0,1385,1386,3,212,106,0,1386,1387,3,
        202,101,0,1387,1388,3,208,104,0,1388,1395,1,0,0,0,1389,1392,3,202,
        101,0,1390,1393,3,206,103,0,1391,1393,3,208,104,0,1392,1390,1,0,
        0,0,1392,1391,1,0,0,0,1393,1395,1,0,0,0,1394,1385,1,0,0,0,1394,1389,
        1,0,0,0,1395,201,1,0,0,0,1396,1398,5,110,0,0,1397,1399,3,214,107,
        0,1398,1397,1,0,0,0,1398,1399,1,0,0,0,1399,1407,1,0,0,0,1400,1401,
        5,73,0,0,1401,1403,5,110,0,0,1402,1404,3,214,107,0,1403,1402,1,0,
        0,0,1403,1404,1,0,0,0,1404,1406,1,0,0,0,1405,1400,1,0,0,0,1406,1409,
        1,0,0,0,1407,1405,1,0,0,0,1407,1408,1,0,0,0,1408,1412,1,0,0,0,1409,
        1407,1,0,0,0,1410,1412,3,88,44,0,1411,1396,1,0,0,0,1411,1410,1,0,
        0,0,1412,203,1,0,0,0,1413,1415,5,110,0,0,1414,1416,3,216,108,0,1415,
        1414,1,0,0,0,1415,1416,1,0,0,0,1416,1417,1,0,0,0,1417,1418,3,208,
        104,0,1418,205,1,0,0,0,1419,1447,5,69,0,0,1420,1425,5,70,0,0,1421,
        1422,5,69,0,0,1422,1424,5,70,0,0,1423,1421,1,0,0,0,1424,1427,1,0,
        0,0,1425,1423,1,0,0,0,1425,1426,1,0,0,0,1426,1428,1,0,0,0,1427,1425,
        1,0,0,0,1428,1448,3,82,41,0,1429,1430,3,186,93,0,1430,1437,5,70,
        0,0,1431,1432,5,69,0,0,1432,1433,3,186,93,0,1433,1434,5,70,0,0,1434,
        1436,1,0,0,0,1435,1431,1,0,0,0,1436,1439,1,0,0,0,1437,1435,1,0,0,
        0,1437,1438,1,0,0,0,1438,1444,1,0,0,0,1439,1437,1,0,0,0,1440,1441,
        5,69,0,0,1441,1443,5,70,0,0,1442,1440,1,0,0,0,1443,1446,1,0,0,0,
        1444,1442,1,0,0,0,1444,1445,1,0,0,0,1445,1448,1,0,0,0,1446,1444,
        1,0,0,0,1447,1420,1,0,0,0,1447,1429,1,0,0,0,1448,207,1,0,0,0,1449,
        1451,3,222,111,0,1450,1452,3,44,22,0,1451,1450,1,0,0,0,1451,1452,
        1,0,0,0,1452,209,1,0,0,0,1453,1454,3,212,106,0,1454,1455,3,220,110,
        0,1455,211,1,0,0,0,1456,1457,5,76,0,0,1457,1458,3,42,21,0,1458,1459,
        5,75,0,0,1459,213,1,0,0,0,1460,1461,5,76,0,0,1461,1464,5,75,0,0,
        1462,1464,3,90,45,0,1463,1460,1,0,0,0,1463,1462,1,0,0,0,1464,215,
        1,0,0,0,1465,1466,5,76,0,0,1466,1469,5,75,0,0,1467,1469,3,212,106,
        0,1468,1465,1,0,0,0,1468,1467,1,0,0,0,1469,217,1,0,0,0,1470,1477,
        3,222,111,0,1471,1472,5,73,0,0,1472,1474,5,110,0,0,1473,1475,3,222,
        111,0,1474,1473,1,0,0,0,1474,1475,1,0,0,0,1475,1477,1,0,0,0,1476,
        1470,1,0,0,0,1476,1471,1,0,0,0,1477,219,1,0,0,0,1478,1479,5,47,0,
        0,1479,1483,3,218,109,0,1480,1481,5,110,0,0,1481,1483,3,222,111,
        0,1482,1478,1,0,0,0,1482,1480,1,0,0,0,1483,221,1,0,0,0,1484,1486,
        5,65,0,0,1485,1487,3,178,89,0,1486,1485,1,0,0,0,1486,1487,1,0,0,
        0,1487,1488,1,0,0,0,1488,1489,5,66,0,0,1489,223,1,0,0,0,182,225,
        230,236,244,253,258,265,272,279,286,293,298,305,317,321,326,330,
        334,337,350,358,364,371,378,382,385,388,397,403,408,411,417,423,
        427,430,437,441,446,455,465,475,482,491,498,504,508,519,523,531,
        536,540,549,563,568,577,585,595,603,605,609,613,622,627,631,641,
        647,654,659,667,671,673,682,690,693,697,702,706,717,723,731,733,
        740,745,754,759,762,767,772,779,795,805,808,817,827,835,838,841,
        854,862,867,875,879,883,887,889,893,899,910,918,926,931,940,949,
        972,975,978,986,990,998,1009,1018,1023,1037,1044,1057,1066,1075,
        1081,1092,1098,1103,1108,1112,1115,1119,1123,1127,1129,1133,1138,
        1143,1160,1171,1175,1190,1206,1249,1262,1273,1281,1283,1305,1310,
        1314,1322,1334,1345,1350,1357,1362,1367,1371,1378,1383,1392,1394,
        1398,1403,1407,1411,1415,1425,1437,1444,1447,1451,1463,1468,1474,
        1476,1482,1486
    ]

class JavaParser ( Parser ):

    grammarFileName = "Java.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'var'", "'record'", "'sealed'", "'non-sealed'", 
                     "'permits'", "'yield'", "'when'", "'abstract'", "'assert'", 
                     "'boolean'", "'break'", "'byte'", "'case'", "'catch'", 
                     "'char'", "'class'", "'const'", "'continue'", "'default'", 
                     "'do'", "'double'", "'else'", "'enum'", "'extends'", 
                     "'final'", "'finally'", "'float'", "'for'", "'if'", 
                     "'goto'", "'implements'", "'import'", "'instanceof'", 
                     "'int'", "'interface'", "'long'", "'native'", "'new'", 
                     "'package'", "'private'", "'protected'", "'public'", 
                     "'return'", "'short'", "'static'", "'strictfp'", "'super'", 
                     "'switch'", "'synchronized'", "'this'", "'throw'", 
                     "'throws'", "'transient'", "'try'", "'void'", "'volatile'", 
                     "'while'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'null'", "'('", "')'", "'{'", 
                     "'}'", "'['", "']'", "';'", "','", "'.'", "'='", "'>'", 
                     "'<'", "'!'", "'~'", "'?'", "':'", "'=='", "'<='", 
                     "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", "'+'", 
                     "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'->'", 
                     "'::'", "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", 
                     "'^='", "'%='", "'<<='", "'>>='", "'>>>='", "<INVALID>", 
                     "'_'", "'@'", "'...'" ]

    symbolicNames = [ "<INVALID>", "VAR", "RECORD", "SEALED", "NON_SEALED", 
                      "PERMITS", "YIELD", "WHEN", "ABSTRACT", "ASSERT", 
                      "BOOLEAN", "BREAK", "BYTE", "CASE", "CATCH", "CHAR", 
                      "CLASS", "CONST", "CONTINUE", "DEFAULT", "DO", "DOUBLE", 
                      "ELSE", "ENUM", "EXTENDS", "FINAL", "FINALLY", "FLOAT", 
                      "FOR", "IF", "GOTO", "IMPLEMENTS", "IMPORT", "INSTANCEOF", 
                      "INT", "INTERFACE", "LONG", "NATIVE", "NEW", "PACKAGE", 
                      "PRIVATE", "PROTECTED", "PUBLIC", "RETURN", "SHORT", 
                      "STATIC", "STRICTFP", "SUPER", "SWITCH", "SYNCHRONIZED", 
                      "THIS", "THROW", "THROWS", "TRANSIENT", "TRY", "VOID", 
                      "VOLATILE", "WHILE", "IntegerLiteral", "FloatingPointLiteral", 
                      "BooleanLiteral", "CharacterLiteral", "StringLiteral", 
                      "TEXT_BLOCK", "NullLiteral", "LPAREN", "RPAREN", "LBRACE", 
                      "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", "DOT", 
                      "ASSIGN", "GT", "LT", "BANG", "TILDE", "QUESTION", 
                      "COLON", "EQUAL", "LE", "GE", "NOTEQUAL", "AND", "OR", 
                      "INC", "DEC", "ADD", "SUB", "MUL", "DIV", "BITAND", 
                      "BITOR", "CARET", "MOD", "ARROW", "COLONCOLON", "ADD_ASSIGN", 
                      "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", 
                      "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", 
                      "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", "Identifier", "UNDERSCORE", 
                      "AT", "ELLIPSIS", "WS", "COMMENT", "LINE_COMMENT" ]

    RULE_compilationUnit = 0
    RULE_packageDeclaration = 1
    RULE_importDeclaration = 2
    RULE_typeDeclaration = 3
    RULE_modifier = 4
    RULE_classOrInterfaceModifier = 5
    RULE_variableModifier = 6
    RULE_classDeclaration = 7
    RULE_permitsClause = 8
    RULE_typeParameters = 9
    RULE_typeParameter = 10
    RULE_typeBound = 11
    RULE_enumDeclaration = 12
    RULE_enumConstants = 13
    RULE_enumConstant = 14
    RULE_enumBodyDeclarations = 15
    RULE_interfaceDeclaration = 16
    RULE_recordDeclaration = 17
    RULE_recordHeader = 18
    RULE_recordComponent = 19
    RULE_recordBody = 20
    RULE_typeList = 21
    RULE_classBody = 22
    RULE_interfaceBody = 23
    RULE_classBodyDeclaration = 24
    RULE_memberDeclaration = 25
    RULE_methodDeclaration = 26
    RULE_genericMethodDeclaration = 27
    RULE_constructorDeclaration = 28
    RULE_genericConstructorDeclaration = 29
    RULE_fieldDeclaration = 30
    RULE_interfaceBodyDeclaration = 31
    RULE_interfaceMemberDeclaration = 32
    RULE_constDeclaration = 33
    RULE_constantDeclarator = 34
    RULE_interfaceMethodDeclaration = 35
    RULE_genericInterfaceMethodDeclaration = 36
    RULE_variableDeclarators = 37
    RULE_variableDeclarator = 38
    RULE_variableDeclaratorId = 39
    RULE_variableInitializer = 40
    RULE_arrayInitializer = 41
    RULE_jType = 42
    RULE_classOrInterfaceType = 43
    RULE_primitiveType = 44
    RULE_typeArguments = 45
    RULE_typeArgumentAnnotation = 46
    RULE_typeArgument = 47
    RULE_qualifiedNameList = 48
    RULE_formalParameters = 49
    RULE_formalParameterList = 50
    RULE_formalParameter = 51
    RULE_lastFormalParameter = 52
    RULE_methodBody = 53
    RULE_constructorBody = 54
    RULE_qualifiedName = 55
    RULE_literal = 56
    RULE_annotation = 57
    RULE_annotationName = 58
    RULE_elementValuePairs = 59
    RULE_elementValuePair = 60
    RULE_elementValue = 61
    RULE_elementValueArrayInitializer = 62
    RULE_annotationTypeDeclaration = 63
    RULE_annotationTypeBody = 64
    RULE_annotationTypeElementDeclaration = 65
    RULE_annotationTypeElementRest = 66
    RULE_annotationMethodOrConstantRest = 67
    RULE_annotationMethodRest = 68
    RULE_annotationConstantRest = 69
    RULE_defaultValue = 70
    RULE_block = 71
    RULE_blockStatement = 72
    RULE_localVariableDeclarationStatement = 73
    RULE_localVariableDeclaration = 74
    RULE_statement = 75
    RULE_catchClause = 76
    RULE_catchType = 77
    RULE_finallyBlock = 78
    RULE_resourceSpecification = 79
    RULE_resources = 80
    RULE_resource = 81
    RULE_switchBlockSection = 82
    RULE_switchLabel = 83
    RULE_forControl = 84
    RULE_forInit = 85
    RULE_enhancedForControl = 86
    RULE_forUpdate = 87
    RULE_parExpression = 88
    RULE_expressionList = 89
    RULE_statementExpression = 90
    RULE_constantExpression = 91
    RULE_pattern = 92
    RULE_expression = 93
    RULE_primary = 94
    RULE_switchExpression = 95
    RULE_lambdaExpression = 96
    RULE_lambdaParameters = 97
    RULE_inferredFormalParameterList = 98
    RULE_lambdaBody = 99
    RULE_creator = 100
    RULE_createdName = 101
    RULE_innerCreator = 102
    RULE_arrayCreatorRest = 103
    RULE_classCreatorRest = 104
    RULE_explicitGenericInvocation = 105
    RULE_nonWildcardTypeArguments = 106
    RULE_typeArgumentsOrDiamond = 107
    RULE_nonWildcardTypeArgumentsOrDiamond = 108
    RULE_superSuffix = 109
    RULE_explicitGenericInvocationSuffix = 110
    RULE_arguments = 111

    ruleNames =  [ "compilationUnit", "packageDeclaration", "importDeclaration", 
                   "typeDeclaration", "modifier", "classOrInterfaceModifier", 
                   "variableModifier", "classDeclaration", "permitsClause", 
                   "typeParameters", "typeParameter", "typeBound", "enumDeclaration", 
                   "enumConstants", "enumConstant", "enumBodyDeclarations", 
                   "interfaceDeclaration", "recordDeclaration", "recordHeader", 
                   "recordComponent", "recordBody", "typeList", "classBody", 
                   "interfaceBody", "classBodyDeclaration", "memberDeclaration", 
                   "methodDeclaration", "genericMethodDeclaration", "constructorDeclaration", 
                   "genericConstructorDeclaration", "fieldDeclaration", 
                   "interfaceBodyDeclaration", "interfaceMemberDeclaration", 
                   "constDeclaration", "constantDeclarator", "interfaceMethodDeclaration", 
                   "genericInterfaceMethodDeclaration", "variableDeclarators", 
                   "variableDeclarator", "variableDeclaratorId", "variableInitializer", 
                   "arrayInitializer", "jType", "classOrInterfaceType", 
                   "primitiveType", "typeArguments", "typeArgumentAnnotation", 
                   "typeArgument", "qualifiedNameList", "formalParameters", 
                   "formalParameterList", "formalParameter", "lastFormalParameter", 
                   "methodBody", "constructorBody", "qualifiedName", "literal", 
                   "annotation", "annotationName", "elementValuePairs", 
                   "elementValuePair", "elementValue", "elementValueArrayInitializer", 
                   "annotationTypeDeclaration", "annotationTypeBody", "annotationTypeElementDeclaration", 
                   "annotationTypeElementRest", "annotationMethodOrConstantRest", 
                   "annotationMethodRest", "annotationConstantRest", "defaultValue", 
                   "block", "blockStatement", "localVariableDeclarationStatement", 
                   "localVariableDeclaration", "statement", "catchClause", 
                   "catchType", "finallyBlock", "resourceSpecification", 
                   "resources", "resource", "switchBlockSection", "switchLabel", 
                   "forControl", "forInit", "enhancedForControl", "forUpdate", 
                   "parExpression", "expressionList", "statementExpression", 
                   "constantExpression", "pattern", "expression", "primary", 
                   "switchExpression", "lambdaExpression", "lambdaParameters", 
                   "inferredFormalParameterList", "lambdaBody", "creator", 
                   "createdName", "innerCreator", "arrayCreatorRest", "classCreatorRest", 
                   "explicitGenericInvocation", "nonWildcardTypeArguments", 
                   "typeArgumentsOrDiamond", "nonWildcardTypeArgumentsOrDiamond", 
                   "superSuffix", "explicitGenericInvocationSuffix", "arguments" ]

    EOF = Token.EOF
    VAR=1
    RECORD=2
    SEALED=3
    NON_SEALED=4
    PERMITS=5
    YIELD=6
    WHEN=7
    ABSTRACT=8
    ASSERT=9
    BOOLEAN=10
    BREAK=11
    BYTE=12
    CASE=13
    CATCH=14
    CHAR=15
    CLASS=16
    CONST=17
    CONTINUE=18
    DEFAULT=19
    DO=20
    DOUBLE=21
    ELSE=22
    ENUM=23
    EXTENDS=24
    FINAL=25
    FINALLY=26
    FLOAT=27
    FOR=28
    IF=29
    GOTO=30
    IMPLEMENTS=31
    IMPORT=32
    INSTANCEOF=33
    INT=34
    INTERFACE=35
    LONG=36
    NATIVE=37
    NEW=38
    PACKAGE=39
    PRIVATE=40
    PROTECTED=41
    PUBLIC=42
    RETURN=43
    SHORT=44
    STATIC=45
    STRICTFP=46
    SUPER=47
    SWITCH=48
    SYNCHRONIZED=49
    THIS=50
    THROW=51
    THROWS=52
    TRANSIENT=53
    TRY=54
    VOID=55
    VOLATILE=56
    WHILE=57
    IntegerLiteral=58
    FloatingPointLiteral=59
    BooleanLiteral=60
    CharacterLiteral=61
    StringLiteral=62
    TEXT_BLOCK=63
    NullLiteral=64
    LPAREN=65
    RPAREN=66
    LBRACE=67
    RBRACE=68
    LBRACK=69
    RBRACK=70
    SEMI=71
    COMMA=72
    DOT=73
    ASSIGN=74
    GT=75
    LT=76
    BANG=77
    TILDE=78
    QUESTION=79
    COLON=80
    EQUAL=81
    LE=82
    GE=83
    NOTEQUAL=84
    AND=85
    OR=86
    INC=87
    DEC=88
    ADD=89
    SUB=90
    MUL=91
    DIV=92
    BITAND=93
    BITOR=94
    CARET=95
    MOD=96
    ARROW=97
    COLONCOLON=98
    ADD_ASSIGN=99
    SUB_ASSIGN=100
    MUL_ASSIGN=101
    DIV_ASSIGN=102
    AND_ASSIGN=103
    OR_ASSIGN=104
    XOR_ASSIGN=105
    MOD_ASSIGN=106
    LSHIFT_ASSIGN=107
    RSHIFT_ASSIGN=108
    URSHIFT_ASSIGN=109
    Identifier=110
    UNDERSCORE=111
    AT=112
    ELLIPSIS=113
    WS=114
    COMMENT=115
    LINE_COMMENT=116

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(JavaParser.EOF, 0)

        def packageDeclaration(self):
            return self.getTypedRuleContext(JavaParser.PackageDeclarationContext,0)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ImportDeclarationContext,i)


        def typeDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompilationUnit" ):
                return visitor.visitCompilationUnit(self)
            else:
                return visitor.visitChildren(self)




    def compilationUnit(self):

        localctx = JavaParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 224
                self.packageDeclaration()


            self.state = 230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==32:
                self.state = 227
                self.importDeclaration()
                self.state = 232
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 113284099408156) != 0) or _la==71 or _la==112:
                self.state = 233
                self.typeDeclaration()
                self.state = 238
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 239
            self.match(JavaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE(self):
            return self.getToken(JavaParser.PACKAGE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_packageDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageDeclaration" ):
                listener.enterPackageDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageDeclaration" ):
                listener.exitPackageDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackageDeclaration" ):
                return visitor.visitPackageDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def packageDeclaration(self):

        localctx = JavaParser.PackageDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_packageDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==112:
                self.state = 241
                self.annotation()
                self.state = 246
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 247
            self.match(JavaParser.PACKAGE)
            self.state = 248
            self.qualifiedName()
            self.state = 249
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(JavaParser.IMPORT, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def MUL(self):
            return self.getToken(JavaParser.MUL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDeclaration" ):
                return visitor.visitImportDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def importDeclaration(self):

        localctx = JavaParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 251
            self.match(JavaParser.IMPORT)
            self.state = 253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 252
                self.match(JavaParser.STATIC)


            self.state = 255
            self.qualifiedName()
            self.state = 258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 256
                self.match(JavaParser.DOT)
                self.state = 257
                self.match(JavaParser.MUL)


            self.state = 260
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def classOrInterfaceModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassOrInterfaceModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassOrInterfaceModifierContext,i)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext,0)


        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_typeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDeclaration" ):
                listener.enterTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDeclaration" ):
                listener.exitTypeDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeDeclaration" ):
                return visitor.visitTypeDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def typeDeclaration(self):

        localctx = JavaParser.TypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_typeDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 298
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 113249731215640) != 0) or _la==112:
                    self.state = 262
                    self.classOrInterfaceModifier()
                    self.state = 267
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 268
                self.classDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 113249731215640) != 0) or _la==112:
                    self.state = 269
                    self.classOrInterfaceModifier()
                    self.state = 274
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 275
                self.enumDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 279
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 113249731215640) != 0) or _la==112:
                    self.state = 276
                    self.classOrInterfaceModifier()
                    self.state = 281
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 282
                self.interfaceDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 286
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 283
                        self.classOrInterfaceModifier() 
                    self.state = 288
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                self.state = 289
                self.annotationTypeDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 113249731215640) != 0) or _la==112:
                    self.state = 290
                    self.classOrInterfaceModifier()
                    self.state = 295
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 296
                self.recordDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 297
                self.match(JavaParser.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceModifier(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceModifierContext,0)


        def NATIVE(self):
            return self.getToken(JavaParser.NATIVE, 0)

        def SYNCHRONIZED(self):
            return self.getToken(JavaParser.SYNCHRONIZED, 0)

        def TRANSIENT(self):
            return self.getToken(JavaParser.TRANSIENT, 0)

        def VOLATILE(self):
            return self.getToken(JavaParser.VOLATILE, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier" ):
                listener.enterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier" ):
                listener.exitModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifier" ):
                return visitor.visitModifier(self)
            else:
                return visitor.visitChildren(self)




    def modifier(self):

        localctx = JavaParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_modifier)
        try:
            self.state = 305
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 8, 25, 40, 41, 42, 45, 46, 112]:
                self.enterOuterAlt(localctx, 1)
                self.state = 300
                self.classOrInterfaceModifier()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 2)
                self.state = 301
                self.match(JavaParser.NATIVE)
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 3)
                self.state = 302
                self.match(JavaParser.SYNCHRONIZED)
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 4)
                self.state = 303
                self.match(JavaParser.TRANSIENT)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 5)
                self.state = 304
                self.match(JavaParser.VOLATILE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassOrInterfaceModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(JavaParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(JavaParser.PROTECTED, 0)

        def PRIVATE(self):
            return self.getToken(JavaParser.PRIVATE, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def ABSTRACT(self):
            return self.getToken(JavaParser.ABSTRACT, 0)

        def FINAL(self):
            return self.getToken(JavaParser.FINAL, 0)

        def STRICTFP(self):
            return self.getToken(JavaParser.STRICTFP, 0)

        def SEALED(self):
            return self.getToken(JavaParser.SEALED, 0)

        def NON_SEALED(self):
            return self.getToken(JavaParser.NON_SEALED, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_classOrInterfaceModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassOrInterfaceModifier" ):
                listener.enterClassOrInterfaceModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassOrInterfaceModifier" ):
                listener.exitClassOrInterfaceModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassOrInterfaceModifier" ):
                return visitor.visitClassOrInterfaceModifier(self)
            else:
                return visitor.visitChildren(self)




    def classOrInterfaceModifier(self):

        localctx = JavaParser.ClassOrInterfaceModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_classOrInterfaceModifier)
        try:
            self.state = 317
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [112]:
                self.enterOuterAlt(localctx, 1)
                self.state = 307
                self.annotation()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 308
                self.match(JavaParser.PUBLIC)
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 3)
                self.state = 309
                self.match(JavaParser.PROTECTED)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 4)
                self.state = 310
                self.match(JavaParser.PRIVATE)
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 5)
                self.state = 311
                self.match(JavaParser.STATIC)
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 6)
                self.state = 312
                self.match(JavaParser.ABSTRACT)
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 7)
                self.state = 313
                self.match(JavaParser.FINAL)
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 8)
                self.state = 314
                self.match(JavaParser.STRICTFP)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 9)
                self.state = 315
                self.match(JavaParser.SEALED)
                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 10)
                self.state = 316
                self.match(JavaParser.NON_SEALED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINAL(self):
            return self.getToken(JavaParser.FINAL, 0)

        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_variableModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableModifier" ):
                listener.enterVariableModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableModifier" ):
                listener.exitVariableModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableModifier" ):
                return visitor.visitVariableModifier(self)
            else:
                return visitor.visitChildren(self)




    def variableModifier(self):

        localctx = JavaParser.VariableModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_variableModifier)
        try:
            self.state = 321
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.enterOuterAlt(localctx, 1)
                self.state = 319
                self.match(JavaParser.FINAL)
                pass
            elif token in [112]:
                self.enterOuterAlt(localctx, 2)
                self.state = 320
                self.annotation()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(JavaParser.CLASS, 0)

        def Identifier(self):
            return self.getToken(JavaParser.Identifier, 0)

        def classBody(self):
            return self.getTypedRuleContext(JavaParser.ClassBodyContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def jType(self):
            return self.getTypedRuleContext(JavaParser.JTypeContext,0)


        def IMPLEMENTS(self):
            return self.getToken(JavaParser.IMPLEMENTS, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParser.TypeListContext,0)


        def permitsClause(self):
            return self.getTypedRuleContext(JavaParser.PermitsClauseContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassDeclaration" ):
                return visitor.visitClassDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def classDeclaration(self):

        localctx = JavaParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_classDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            self.match(JavaParser.CLASS)
            self.state = 324
            self.match(JavaParser.Identifier)
            self.state = 326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 325
                self.typeParameters()


            self.state = 330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 328
                self.match(JavaParser.EXTENDS)
                self.state = 329
                self.jType()


            self.state = 334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 332
                self.match(JavaParser.IMPLEMENTS)
                self.state = 333
                self.typeList()


            self.state = 337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 336
                self.permitsClause()


            self.state = 339
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PermitsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERMITS(self):
            return self.getToken(JavaParser.PERMITS, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParser.TypeListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_permitsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPermitsClause" ):
                listener.enterPermitsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPermitsClause" ):
                listener.exitPermitsClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPermitsClause" ):
                return visitor.visitPermitsClause(self)
            else:
                return visitor.visitChildren(self)




    def permitsClause(self):

        localctx = JavaParser.PermitsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_permitsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self.match(JavaParser.PERMITS)
            self.state = 342
            self.typeList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeParameterContext,i)


        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameters" ):
                listener.enterTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameters" ):
                listener.exitTypeParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameters" ):
                return visitor.visitTypeParameters(self)
            else:
                return visitor.visitChildren(self)




    def typeParameters(self):

        localctx = JavaParser.TypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_typeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 344
            self.match(JavaParser.LT)
            self.state = 345
            self.typeParameter()
            self.state = 350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==72:
                self.state = 346
                self.match(JavaParser.COMMA)
                self.state = 347
                self.typeParameter()
                self.state = 352
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 353
            self.match(JavaParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(JavaParser.Identifier, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def typeBound(self):
            return self.getTypedRuleContext(JavaParser.TypeBoundContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameter" ):
                return visitor.visitTypeParameter(self)
            else:
                return visitor.visitChildren(self)




    def typeParameter(self):

        localctx = JavaParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_typeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==112:
                self.state = 355
                self.annotation()
                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 361
            self.match(JavaParser.Identifier)
            self.state = 364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 362
                self.match(JavaParser.EXTENDS)
                self.state = 363
                self.typeBound()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.JTypeContext)
            else:
                return self.getTypedRuleContext(JavaParser.JTypeContext,i)


        def BITAND(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.BITAND)
            else:
                return self.getToken(JavaParser.BITAND, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeBound" ):
                listener.enterTypeBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeBound" ):
                listener.exitTypeBound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeBound" ):
                return visitor.visitTypeBound(self)
            else:
                return visitor.visitChildren(self)




    def typeBound(self):

        localctx = JavaParser.TypeBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_typeBound)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            self.jType()
            self.state = 371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==93:
                self.state = 367
                self.match(JavaParser.BITAND)
                self.state = 368
                self.jType()
                self.state = 373
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(JavaParser.ENUM, 0)

        def Identifier(self):
            return self.getToken(JavaParser.Identifier, 0)

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def IMPLEMENTS(self):
            return self.getToken(JavaParser.IMPLEMENTS, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParser.TypeListContext,0)


        def enumConstants(self):
            return self.getTypedRuleContext(JavaParser.EnumConstantsContext,0)


        def COMMA(self):
            return self.getToken(JavaParser.COMMA, 0)

        def enumBodyDeclarations(self):
            return self.getTypedRuleContext(JavaParser.EnumBodyDeclarationsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_enumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDeclaration" ):
                listener.enterEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDeclaration" ):
                listener.exitEnumDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumDeclaration" ):
                return visitor.visitEnumDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def enumDeclaration(self):

        localctx = JavaParser.EnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_enumDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 374
            self.match(JavaParser.ENUM)
            self.state = 375
            self.match(JavaParser.Identifier)
            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 376
                self.match(JavaParser.IMPLEMENTS)
                self.state = 377
                self.typeList()


            self.state = 380
            self.match(JavaParser.LBRACE)
            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110 or _la==112:
                self.state = 381
                self.enumConstants()


            self.state = 385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 384
                self.match(JavaParser.COMMA)


            self.state = 388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 387
                self.enumBodyDeclarations()


            self.state = 390
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumConstantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumConstant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.EnumConstantContext)
            else:
                return self.getTypedRuleContext(JavaParser.EnumConstantContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_enumConstants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstants" ):
                listener.enterEnumConstants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstants" ):
                listener.exitEnumConstants(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumConstants" ):
                return visitor.visitEnumConstants(self)
            else:
                return visitor.visitChildren(self)




    def enumConstants(self):

        localctx = JavaParser.EnumConstantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_enumConstants)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.enumConstant()
            self.state = 397
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 393
                    self.match(JavaParser.COMMA)
                    self.state = 394
                    self.enumConstant() 
                self.state = 399
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(JavaParser.Identifier, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(JavaParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_enumConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstant" ):
                listener.enterEnumConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstant" ):
                listener.exitEnumConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumConstant" ):
                return visitor.visitEnumConstant(self)
            else:
                return visitor.visitChildren(self)




    def enumConstant(self):

        localctx = JavaParser.EnumConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_enumConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==112:
                self.state = 400
                self.annotation()
                self.state = 405
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 406
            self.match(JavaParser.Identifier)
            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 407
                self.arguments()


            self.state = 411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 410
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumBodyDeclarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_enumBodyDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumBodyDeclarations" ):
                listener.enterEnumBodyDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumBodyDeclarations" ):
                listener.exitEnumBodyDeclarations(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumBodyDeclarations" ):
                return visitor.visitEnumBodyDeclarations(self)
            else:
                return visitor.visitChildren(self)




    def enumBodyDeclarations(self):

        localctx = JavaParser.EnumBodyDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_enumBodyDeclarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.match(JavaParser.SEMI)
            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 117787640025158936) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 43980465111569) != 0):
                self.state = 414
                self.classBodyDeclaration()
                self.state = 419
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(JavaParser.INTERFACE, 0)

        def Identifier(self):
            return self.getToken(JavaParser.Identifier, 0)

        def interfaceBody(self):
            return self.getTypedRuleContext(JavaParser.InterfaceBodyContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParser.TypeListContext,0)


        def permitsClause(self):
            return self.getTypedRuleContext(JavaParser.PermitsClauseContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDeclaration" ):
                listener.enterInterfaceDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDeclaration" ):
                listener.exitInterfaceDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceDeclaration" ):
                return visitor.visitInterfaceDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def interfaceDeclaration(self):

        localctx = JavaParser.InterfaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_interfaceDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 420
            self.match(JavaParser.INTERFACE)
            self.state = 421
            self.match(JavaParser.Identifier)
            self.state = 423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 422
                self.typeParameters()


            self.state = 427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 425
                self.match(JavaParser.EXTENDS)
                self.state = 426
                self.typeList()


            self.state = 430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 429
                self.permitsClause()


            self.state = 432
            self.interfaceBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECORD(self):
            return self.getToken(JavaParser.RECORD, 0)

        def Identifier(self):
            return self.getToken(JavaParser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def recordBody(self):
            return self.getTypedRuleContext(JavaParser.RecordBodyContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def recordHeader(self):
            return self.getTypedRuleContext(JavaParser.RecordHeaderContext,0)


        def IMPLEMENTS(self):
            return self.getToken(JavaParser.IMPLEMENTS, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParser.TypeListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_recordDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordDeclaration" ):
                listener.enterRecordDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordDeclaration" ):
                listener.exitRecordDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordDeclaration" ):
                return visitor.visitRecordDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def recordDeclaration(self):

        localctx = JavaParser.RecordDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_recordDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 434
            self.match(JavaParser.RECORD)
            self.state = 435
            self.match(JavaParser.Identifier)
            self.state = 437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 436
                self.typeParameters()


            self.state = 439
            self.match(JavaParser.LPAREN)
            self.state = 441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 17678221743104) != 0) or _la==110:
                self.state = 440
                self.recordHeader()


            self.state = 443
            self.match(JavaParser.RPAREN)
            self.state = 446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 444
                self.match(JavaParser.IMPLEMENTS)
                self.state = 445
                self.typeList()


            self.state = 448
            self.recordBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def recordComponent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.RecordComponentContext)
            else:
                return self.getTypedRuleContext(JavaParser.RecordComponentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_recordHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordHeader" ):
                listener.enterRecordHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordHeader" ):
                listener.exitRecordHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordHeader" ):
                return visitor.visitRecordHeader(self)
            else:
                return visitor.visitChildren(self)




    def recordHeader(self):

        localctx = JavaParser.RecordHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_recordHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self.recordComponent()
            self.state = 455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==72:
                self.state = 451
                self.match(JavaParser.COMMA)
                self.state = 452
                self.recordComponent()
                self.state = 457
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordComponentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jType(self):
            return self.getTypedRuleContext(JavaParser.JTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_recordComponent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordComponent" ):
                listener.enterRecordComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordComponent" ):
                listener.exitRecordComponent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordComponent" ):
                return visitor.visitRecordComponent(self)
            else:
                return visitor.visitChildren(self)




    def recordComponent(self):

        localctx = JavaParser.RecordComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_recordComponent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.jType()
            self.state = 459
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_recordBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordBody" ):
                listener.enterRecordBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordBody" ):
                listener.exitRecordBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordBody" ):
                return visitor.visitRecordBody(self)
            else:
                return visitor.visitChildren(self)




    def recordBody(self):

        localctx = JavaParser.RecordBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_recordBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 461
            self.match(JavaParser.LBRACE)
            self.state = 465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 117787640025158936) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 43980465111569) != 0):
                self.state = 462
                self.classBodyDeclaration()
                self.state = 467
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 468
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.JTypeContext)
            else:
                return self.getTypedRuleContext(JavaParser.JTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeList" ):
                listener.enterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeList" ):
                listener.exitTypeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeList" ):
                return visitor.visitTypeList(self)
            else:
                return visitor.visitChildren(self)




    def typeList(self):

        localctx = JavaParser.TypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_typeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.jType()
            self.state = 475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==72:
                self.state = 471
                self.match(JavaParser.COMMA)
                self.state = 472
                self.jType()
                self.state = 477
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_classBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBody" ):
                listener.enterClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBody" ):
                listener.exitClassBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassBody" ):
                return visitor.visitClassBody(self)
            else:
                return visitor.visitChildren(self)




    def classBody(self):

        localctx = JavaParser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_classBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.match(JavaParser.LBRACE)
            self.state = 482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 117787640025158936) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 43980465111569) != 0):
                self.state = 479
                self.classBodyDeclaration()
                self.state = 484
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 485
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def interfaceBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.InterfaceBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.InterfaceBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceBody" ):
                listener.enterInterfaceBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceBody" ):
                listener.exitInterfaceBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceBody" ):
                return visitor.visitInterfaceBody(self)
            else:
                return visitor.visitChildren(self)




    def interfaceBody(self):

        localctx = JavaParser.InterfaceBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_interfaceBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.match(JavaParser.LBRACE)
            self.state = 491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 117787640025683224) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 2748779069473) != 0):
                self.state = 488
                self.interfaceBodyDeclaration()
                self.state = 493
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 494
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def memberDeclaration(self):
            return self.getTypedRuleContext(JavaParser.MemberDeclarationContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_classBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBodyDeclaration" ):
                listener.enterClassBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBodyDeclaration" ):
                listener.exitClassBodyDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassBodyDeclaration" ):
                return visitor.visitClassBodyDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def classBodyDeclaration(self):

        localctx = JavaParser.ClassBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_classBodyDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 508
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 496
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==45:
                    self.state = 497
                    self.match(JavaParser.STATIC)


                self.state = 500
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 504
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 501
                        self.modifier() 
                    self.state = 506
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

                self.state = 507
                self.memberDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.MethodDeclarationContext,0)


        def genericMethodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.GenericMethodDeclarationContext,0)


        def fieldDeclaration(self):
            return self.getTypedRuleContext(JavaParser.FieldDeclarationContext,0)


        def constructorDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ConstructorDeclarationContext,0)


        def genericConstructorDeclaration(self):
            return self.getTypedRuleContext(JavaParser.GenericConstructorDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_memberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDeclaration" ):
                listener.enterMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDeclaration" ):
                listener.exitMemberDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberDeclaration" ):
                return visitor.visitMemberDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def memberDeclaration(self):

        localctx = JavaParser.MemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_memberDeclaration)
        try:
            self.state = 519
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 510
                self.methodDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 511
                self.genericMethodDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 512
                self.fieldDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 513
                self.constructorDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 514
                self.genericConstructorDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 515
                self.interfaceDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 516
                self.annotationTypeDeclaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 517
                self.classDeclaration()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 518
                self.enumDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(JavaParser.Identifier, 0)

        def formalParameters(self):
            return self.getTypedRuleContext(JavaParser.FormalParametersContext,0)


        def jType(self):
            return self.getTypedRuleContext(JavaParser.JTypeContext,0)


        def VOID(self):
            return self.getToken(JavaParser.VOID, 0)

        def methodBody(self):
            return self.getTypedRuleContext(JavaParser.MethodBodyContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def THROWS(self):
            return self.getToken(JavaParser.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_methodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDeclaration" ):
                listener.enterMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDeclaration" ):
                listener.exitMethodDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodDeclaration" ):
                return visitor.visitMethodDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def methodDeclaration(self):

        localctx = JavaParser.MethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_methodDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 15, 21, 27, 34, 36, 44, 110]:
                self.state = 521
                self.jType()
                pass
            elif token in [55]:
                self.state = 522
                self.match(JavaParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 525
            self.match(JavaParser.Identifier)
            self.state = 526
            self.formalParameters()
            self.state = 531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==69:
                self.state = 527
                self.match(JavaParser.LBRACK)
                self.state = 528
                self.match(JavaParser.RBRACK)
                self.state = 533
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 534
                self.match(JavaParser.THROWS)
                self.state = 535
                self.qualifiedNameList()


            self.state = 540
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [67]:
                self.state = 538
                self.methodBody()
                pass
            elif token in [71]:
                self.state = 539
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def methodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.MethodDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_genericMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericMethodDeclaration" ):
                listener.enterGenericMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericMethodDeclaration" ):
                listener.exitGenericMethodDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericMethodDeclaration" ):
                return visitor.visitGenericMethodDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def genericMethodDeclaration(self):

        localctx = JavaParser.GenericMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_genericMethodDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self.typeParameters()
            self.state = 543
            self.methodDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(JavaParser.Identifier, 0)

        def formalParameters(self):
            return self.getTypedRuleContext(JavaParser.FormalParametersContext,0)


        def constructorBody(self):
            return self.getTypedRuleContext(JavaParser.ConstructorBodyContext,0)


        def THROWS(self):
            return self.getToken(JavaParser.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_constructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDeclaration" ):
                listener.enterConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDeclaration" ):
                listener.exitConstructorDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructorDeclaration" ):
                return visitor.visitConstructorDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def constructorDeclaration(self):

        localctx = JavaParser.ConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_constructorDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            self.match(JavaParser.Identifier)
            self.state = 546
            self.formalParameters()
            self.state = 549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 547
                self.match(JavaParser.THROWS)
                self.state = 548
                self.qualifiedNameList()


            self.state = 551
            self.constructorBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericConstructorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def constructorDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ConstructorDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_genericConstructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericConstructorDeclaration" ):
                listener.enterGenericConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericConstructorDeclaration" ):
                listener.exitGenericConstructorDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericConstructorDeclaration" ):
                return visitor.visitGenericConstructorDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def genericConstructorDeclaration(self):

        localctx = JavaParser.GenericConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_genericConstructorDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 553
            self.typeParameters()
            self.state = 554
            self.constructorDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jType(self):
            return self.getTypedRuleContext(JavaParser.JTypeContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_fieldDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDeclaration" ):
                listener.enterFieldDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDeclaration" ):
                listener.exitFieldDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldDeclaration" ):
                return visitor.visitFieldDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def fieldDeclaration(self):

        localctx = JavaParser.FieldDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_fieldDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self.jType()
            self.state = 557
            self.variableDeclarators()
            self.state = 558
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceBodyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceMemberDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceMemberDeclarationContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_interfaceBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceBodyDeclaration" ):
                listener.enterInterfaceBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceBodyDeclaration" ):
                listener.exitInterfaceBodyDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceBodyDeclaration" ):
                return visitor.visitInterfaceBodyDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def interfaceBodyDeclaration(self):

        localctx = JavaParser.InterfaceBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_interfaceBodyDeclaration)
        try:
            self.state = 568
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 8, 10, 12, 15, 16, 19, 21, 23, 25, 27, 34, 35, 36, 37, 40, 41, 42, 44, 45, 46, 49, 53, 55, 56, 76, 110, 112]:
                self.enterOuterAlt(localctx, 1)
                self.state = 563
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 560
                        self.modifier() 
                    self.state = 565
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

                self.state = 566
                self.interfaceMemberDeclaration()
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 2)
                self.state = 567
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ConstDeclarationContext,0)


        def interfaceMethodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceMethodDeclarationContext,0)


        def genericInterfaceMethodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.GenericInterfaceMethodDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceMemberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMemberDeclaration" ):
                listener.enterInterfaceMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMemberDeclaration" ):
                listener.exitInterfaceMemberDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceMemberDeclaration" ):
                return visitor.visitInterfaceMemberDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def interfaceMemberDeclaration(self):

        localctx = JavaParser.InterfaceMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_interfaceMemberDeclaration)
        try:
            self.state = 577
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 570
                self.constDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 571
                self.interfaceMethodDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 572
                self.genericInterfaceMethodDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 573
                self.interfaceDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 574
                self.annotationTypeDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 575
                self.classDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 576
                self.enumDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jType(self):
            return self.getTypedRuleContext(JavaParser.JTypeContext,0)


        def constantDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ConstantDeclaratorContext)
            else:
                return self.getTypedRuleContext(JavaParser.ConstantDeclaratorContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_constDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDeclaration" ):
                listener.enterConstDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDeclaration" ):
                listener.exitConstDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstDeclaration" ):
                return visitor.visitConstDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def constDeclaration(self):

        localctx = JavaParser.ConstDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_constDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 579
            self.jType()
            self.state = 580
            self.constantDeclarator()
            self.state = 585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==72:
                self.state = 581
                self.match(JavaParser.COMMA)
                self.state = 582
                self.constantDeclarator()
                self.state = 587
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 588
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(JavaParser.Identifier, 0)

        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def variableInitializer(self):
            return self.getTypedRuleContext(JavaParser.VariableInitializerContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def getRuleIndex(self):
            return JavaParser.RULE_constantDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDeclarator" ):
                listener.enterConstantDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDeclarator" ):
                listener.exitConstantDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantDeclarator" ):
                return visitor.visitConstantDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def constantDeclarator(self):

        localctx = JavaParser.ConstantDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_constantDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            self.match(JavaParser.Identifier)
            self.state = 595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==69:
                self.state = 591
                self.match(JavaParser.LBRACK)
                self.state = 592
                self.match(JavaParser.RBRACK)
                self.state = 597
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 598
            self.match(JavaParser.ASSIGN)
            self.state = 599
            self.variableInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameters(self):
            return self.getTypedRuleContext(JavaParser.FormalParametersContext,0)


        def Identifier(self):
            return self.getToken(JavaParser.Identifier, 0)

        def methodBody(self):
            return self.getTypedRuleContext(JavaParser.MethodBodyContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DEFAULT)
            else:
                return self.getToken(JavaParser.DEFAULT, i)

        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def THROWS(self):
            return self.getToken(JavaParser.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameListContext,0)


        def jType(self):
            return self.getTypedRuleContext(JavaParser.JTypeContext,0)


        def VOID(self):
            return self.getToken(JavaParser.VOID, 0)

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMethodDeclaration" ):
                listener.enterInterfaceMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMethodDeclaration" ):
                listener.exitInterfaceMethodDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceMethodDeclaration" ):
                return visitor.visitInterfaceMethodDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def interfaceMethodDeclaration(self):

        localctx = JavaParser.InterfaceMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_interfaceMethodDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 81741130416783640) != 0) or _la==112:
                self.state = 603
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [19]:
                    self.state = 601
                    self.match(JavaParser.DEFAULT)
                    pass
                elif token in [3, 4, 8, 25, 37, 40, 41, 42, 45, 46, 49, 53, 56, 112]:
                    self.state = 602
                    self.modifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 607
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 608
                self.typeParameters()


            self.state = 613
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 15, 21, 27, 34, 36, 44, 110]:
                self.state = 611
                self.jType()
                pass
            elif token in [55]:
                self.state = 612
                self.match(JavaParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 615
            self.match(JavaParser.Identifier)
            self.state = 617
            self.formalParameters()
            self.state = 622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==69:
                self.state = 618
                self.match(JavaParser.LBRACK)
                self.state = 619
                self.match(JavaParser.RBRACK)
                self.state = 624
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 625
                self.match(JavaParser.THROWS)
                self.state = 626
                self.qualifiedNameList()


            self.state = 631
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [67]:
                self.state = 629
                self.methodBody()
                pass
            elif token in [71]:
                self.state = 630
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericInterfaceMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def interfaceMethodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceMethodDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_genericInterfaceMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericInterfaceMethodDeclaration" ):
                listener.enterGenericInterfaceMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericInterfaceMethodDeclaration" ):
                listener.exitGenericInterfaceMethodDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericInterfaceMethodDeclaration" ):
                return visitor.visitGenericInterfaceMethodDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def genericInterfaceMethodDeclaration(self):

        localctx = JavaParser.GenericInterfaceMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_genericInterfaceMethodDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            self.typeParameters()
            self.state = 634
            self.interfaceMethodDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableDeclaratorContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableDeclaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_variableDeclarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarators" ):
                listener.enterVariableDeclarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarators" ):
                listener.exitVariableDeclarators(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarators" ):
                return visitor.visitVariableDeclarators(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarators(self):

        localctx = JavaParser.VariableDeclaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_variableDeclarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 636
            self.variableDeclarator()
            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==72:
                self.state = 637
                self.match(JavaParser.COMMA)
                self.state = 638
                self.variableDeclarator()
                self.state = 643
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def variableInitializer(self):
            return self.getTypedRuleContext(JavaParser.VariableInitializerContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_variableDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarator" ):
                listener.enterVariableDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarator" ):
                listener.exitVariableDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarator" ):
                return visitor.visitVariableDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarator(self):

        localctx = JavaParser.VariableDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_variableDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.variableDeclaratorId()
            self.state = 647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 645
                self.match(JavaParser.ASSIGN)
                self.state = 646
                self.variableInitializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(JavaParser.Identifier, 0)

        def UNDERSCORE(self):
            return self.getToken(JavaParser.UNDERSCORE, 0)

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def getRuleIndex(self):
            return JavaParser.RULE_variableDeclaratorId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaratorId" ):
                listener.enterVariableDeclaratorId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaratorId" ):
                listener.exitVariableDeclaratorId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclaratorId" ):
                return visitor.visitVariableDeclaratorId(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclaratorId(self):

        localctx = JavaParser.VariableDeclaratorIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_variableDeclaratorId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            _la = self._input.LA(1)
            if not(_la==110 or _la==111):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==69:
                self.state = 650
                self.match(JavaParser.LBRACK)
                self.state = 651
                self.match(JavaParser.RBRACK)
                self.state = 656
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayInitializer(self):
            return self.getTypedRuleContext(JavaParser.ArrayInitializerContext,0)


        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_variableInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableInitializer" ):
                listener.enterVariableInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableInitializer" ):
                listener.exitVariableInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableInitializer" ):
                return visitor.visitVariableInitializer(self)
            else:
                return visitor.visitChildren(self)




    def variableInitializer(self):

        localctx = JavaParser.VariableInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_variableInitializer)
        try:
            self.state = 659
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [67]:
                self.enterOuterAlt(localctx, 1)
                self.state = 657
                self.arrayInitializer()
                pass
            elif token in [10, 12, 15, 21, 27, 34, 36, 38, 44, 47, 48, 50, 55, 58, 59, 60, 61, 62, 63, 64, 65, 76, 77, 78, 87, 88, 89, 90, 110]:
                self.enterOuterAlt(localctx, 2)
                self.state = 658
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def variableInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableInitializerContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableInitializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_arrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayInitializer" ):
                listener.enterArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayInitializer" ):
                listener.exitArrayInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayInitializer" ):
                return visitor.visitArrayInitializer(self)
            else:
                return visitor.visitChildren(self)




    def arrayInitializer(self):

        localctx = JavaParser.ArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_arrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self.match(JavaParser.LBRACE)
            self.state = 673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -250635513661189120) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 70368870035467) != 0):
                self.state = 662
                self.variableInitializer()
                self.state = 667
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 663
                        self.match(JavaParser.COMMA)
                        self.state = 664
                        self.variableInitializer() 
                    self.state = 669
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==72:
                    self.state = 670
                    self.match(JavaParser.COMMA)




            self.state = 675
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceTypeContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def primitiveType(self):
            return self.getTypedRuleContext(JavaParser.PrimitiveTypeContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_jType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJType" ):
                listener.enterJType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJType" ):
                listener.exitJType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJType" ):
                return visitor.visitJType(self)
            else:
                return visitor.visitChildren(self)




    def jType(self):

        localctx = JavaParser.JTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_jType)
        try:
            self.state = 693
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [110]:
                self.enterOuterAlt(localctx, 1)
                self.state = 677
                self.classOrInterfaceType()
                self.state = 682
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 678
                        self.match(JavaParser.LBRACK)
                        self.state = 679
                        self.match(JavaParser.RBRACK) 
                    self.state = 684
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

                pass
            elif token in [10, 12, 15, 21, 27, 34, 36, 44]:
                self.enterOuterAlt(localctx, 2)
                self.state = 685
                self.primitiveType()
                self.state = 690
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 686
                        self.match(JavaParser.LBRACK)
                        self.state = 687
                        self.match(JavaParser.RBRACK) 
                    self.state = 692
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassOrInterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.Identifier)
            else:
                return self.getToken(JavaParser.Identifier, i)

        def typeArguments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeArgumentsContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def getRuleIndex(self):
            return JavaParser.RULE_classOrInterfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassOrInterfaceType" ):
                listener.enterClassOrInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassOrInterfaceType" ):
                listener.exitClassOrInterfaceType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassOrInterfaceType" ):
                return visitor.visitClassOrInterfaceType(self)
            else:
                return visitor.visitChildren(self)




    def classOrInterfaceType(self):

        localctx = JavaParser.ClassOrInterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_classOrInterfaceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(JavaParser.Identifier)
            self.state = 697
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 696
                self.typeArguments()


            self.state = 706
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 699
                    self.match(JavaParser.DOT)
                    self.state = 700
                    self.match(JavaParser.Identifier)
                    self.state = 702
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                    if la_ == 1:
                        self.state = 701
                        self.typeArguments()

             
                self.state = 708
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimitiveTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN(self):
            return self.getToken(JavaParser.BOOLEAN, 0)

        def CHAR(self):
            return self.getToken(JavaParser.CHAR, 0)

        def BYTE(self):
            return self.getToken(JavaParser.BYTE, 0)

        def SHORT(self):
            return self.getToken(JavaParser.SHORT, 0)

        def INT(self):
            return self.getToken(JavaParser.INT, 0)

        def LONG(self):
            return self.getToken(JavaParser.LONG, 0)

        def FLOAT(self):
            return self.getToken(JavaParser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(JavaParser.DOUBLE, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_primitiveType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveType" ):
                listener.enterPrimitiveType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveType" ):
                listener.exitPrimitiveType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimitiveType" ):
                return visitor.visitPrimitiveType(self)
            else:
                return visitor.visitChildren(self)




    def primitiveType(self):

        localctx = JavaParser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_primitiveType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 17678221743104) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def typeArgumentAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeArgumentAnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeArgumentAnnotationContext,i)


        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArguments" ):
                listener.enterTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArguments" ):
                listener.exitTypeArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeArguments" ):
                return visitor.visitTypeArguments(self)
            else:
                return visitor.visitChildren(self)




    def typeArguments(self):

        localctx = JavaParser.TypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_typeArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self.match(JavaParser.LT)
            self.state = 712
            self.typeArgumentAnnotation()
            self.state = 717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==72:
                self.state = 713
                self.match(JavaParser.COMMA)
                self.state = 714
                self.typeArgumentAnnotation()
                self.state = 719
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 720
            self.match(JavaParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeArgument(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentContext,0)


        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_typeArgumentAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgumentAnnotation" ):
                listener.enterTypeArgumentAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgumentAnnotation" ):
                listener.exitTypeArgumentAnnotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeArgumentAnnotation" ):
                return visitor.visitTypeArgumentAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def typeArgumentAnnotation(self):

        localctx = JavaParser.TypeArgumentAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_typeArgumentAnnotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 722
                self.annotation()


            self.state = 725
            self.typeArgument()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jType(self):
            return self.getTypedRuleContext(JavaParser.JTypeContext,0)


        def QUESTION(self):
            return self.getToken(JavaParser.QUESTION, 0)

        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_typeArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgument" ):
                listener.enterTypeArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgument" ):
                listener.exitTypeArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeArgument" ):
                return visitor.visitTypeArgument(self)
            else:
                return visitor.visitChildren(self)




    def typeArgument(self):

        localctx = JavaParser.TypeArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_typeArgument)
        self._la = 0 # Token type
        try:
            self.state = 733
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 15, 21, 27, 34, 36, 44, 110]:
                self.enterOuterAlt(localctx, 1)
                self.state = 727
                self.jType()
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 728
                self.match(JavaParser.QUESTION)
                self.state = 731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24 or _la==47:
                    self.state = 729
                    _la = self._input.LA(1)
                    if not(_la==24 or _la==47):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 730
                    self.jType()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaParser.QualifiedNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_qualifiedNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedNameList" ):
                listener.enterQualifiedNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedNameList" ):
                listener.exitQualifiedNameList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedNameList" ):
                return visitor.visitQualifiedNameList(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedNameList(self):

        localctx = JavaParser.QualifiedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_qualifiedNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.qualifiedName()
            self.state = 740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==72:
                self.state = 736
                self.match(JavaParser.COMMA)
                self.state = 737
                self.qualifiedName()
                self.state = 742
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JavaParser.FormalParameterListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_formalParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameters" ):
                listener.enterFormalParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameters" ):
                listener.exitFormalParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormalParameters" ):
                return visitor.visitFormalParameters(self)
            else:
                return visitor.visitChildren(self)




    def formalParameters(self):

        localctx = JavaParser.FormalParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_formalParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.match(JavaParser.LPAREN)
            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 17678255297538) != 0) or _la==110 or _la==112:
                self.state = 744
                self.formalParameterList()


            self.state = 747
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.FormalParameterContext)
            else:
                return self.getTypedRuleContext(JavaParser.FormalParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def lastFormalParameter(self):
            return self.getTypedRuleContext(JavaParser.LastFormalParameterContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_formalParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterList" ):
                listener.enterFormalParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterList" ):
                listener.exitFormalParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormalParameterList" ):
                return visitor.visitFormalParameterList(self)
            else:
                return visitor.visitChildren(self)




    def formalParameterList(self):

        localctx = JavaParser.FormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_formalParameterList)
        self._la = 0 # Token type
        try:
            self.state = 762
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 749
                self.formalParameter()
                self.state = 754
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 750
                        self.match(JavaParser.COMMA)
                        self.state = 751
                        self.formalParameter() 
                    self.state = 756
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

                self.state = 759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==72:
                    self.state = 757
                    self.match(JavaParser.COMMA)
                    self.state = 758
                    self.lastFormalParameter()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 761
                self.lastFormalParameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def jType(self):
            return self.getTypedRuleContext(JavaParser.JTypeContext,0)


        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_formalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameter" ):
                listener.enterFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameter" ):
                listener.exitFormalParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormalParameter" ):
                return visitor.visitFormalParameter(self)
            else:
                return visitor.visitChildren(self)




    def formalParameter(self):

        localctx = JavaParser.FormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_formalParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==25 or _la==112:
                self.state = 764
                self.variableModifier()
                self.state = 769
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 772
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 15, 21, 27, 34, 36, 44, 110]:
                self.state = 770
                self.jType()
                pass
            elif token in [1]:
                self.state = 771
                self.match(JavaParser.VAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 774
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LastFormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jType(self):
            return self.getTypedRuleContext(JavaParser.JTypeContext,0)


        def ELLIPSIS(self):
            return self.getToken(JavaParser.ELLIPSIS, 0)

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_lastFormalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLastFormalParameter" ):
                listener.enterLastFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLastFormalParameter" ):
                listener.exitLastFormalParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLastFormalParameter" ):
                return visitor.visitLastFormalParameter(self)
            else:
                return visitor.visitChildren(self)




    def lastFormalParameter(self):

        localctx = JavaParser.LastFormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_lastFormalParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==25 or _la==112:
                self.state = 776
                self.variableModifier()
                self.state = 781
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 782
            self.jType()
            self.state = 783
            self.match(JavaParser.ELLIPSIS)
            self.state = 784
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_methodBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodBody" ):
                listener.enterMethodBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodBody" ):
                listener.exitMethodBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodBody" ):
                return visitor.visitMethodBody(self)
            else:
                return visitor.visitChildren(self)




    def methodBody(self):

        localctx = JavaParser.MethodBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_methodBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_constructorBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorBody" ):
                listener.enterConstructorBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorBody" ):
                listener.exitConstructorBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructorBody" ):
                return visitor.visitConstructorBody(self)
            else:
                return visitor.visitChildren(self)




    def constructorBody(self):

        localctx = JavaParser.ConstructorBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_constructorBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.Identifier)
            else:
                return self.getToken(JavaParser.Identifier, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def getRuleIndex(self):
            return JavaParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedName" ):
                return visitor.visitQualifiedName(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedName(self):

        localctx = JavaParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 790
            self.match(JavaParser.Identifier)
            self.state = 795
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 791
                    self.match(JavaParser.DOT)
                    self.state = 792
                    self.match(JavaParser.Identifier) 
                self.state = 797
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntegerLiteral(self):
            return self.getToken(JavaParser.IntegerLiteral, 0)

        def FloatingPointLiteral(self):
            return self.getToken(JavaParser.FloatingPointLiteral, 0)

        def CharacterLiteral(self):
            return self.getToken(JavaParser.CharacterLiteral, 0)

        def StringLiteral(self):
            return self.getToken(JavaParser.StringLiteral, 0)

        def TEXT_BLOCK(self):
            return self.getToken(JavaParser.TEXT_BLOCK, 0)

        def BooleanLiteral(self):
            return self.getToken(JavaParser.BooleanLiteral, 0)

        def NullLiteral(self):
            return self.getToken(JavaParser.NullLiteral, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = JavaParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            _la = self._input.LA(1)
            if not(((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 127) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaParser.AT, 0)

        def annotationName(self):
            return self.getTypedRuleContext(JavaParser.AnnotationNameContext,0)


        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def elementValuePairs(self):
            return self.getTypedRuleContext(JavaParser.ElementValuePairsContext,0)


        def elementValue(self):
            return self.getTypedRuleContext(JavaParser.ElementValueContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotation" ):
                return visitor.visitAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def annotation(self):

        localctx = JavaParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.match(JavaParser.AT)
            self.state = 801
            self.annotationName()
            self.state = 808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 802
                self.match(JavaParser.LPAREN)
                self.state = 805
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 803
                    self.elementValuePairs()

                elif la_ == 2:
                    self.state = 804
                    self.elementValue()


                self.state = 807
                self.match(JavaParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationName" ):
                listener.enterAnnotationName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationName" ):
                listener.exitAnnotationName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationName" ):
                return visitor.visitAnnotationName(self)
            else:
                return visitor.visitChildren(self)




    def annotationName(self):

        localctx = JavaParser.AnnotationNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_annotationName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self.qualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValuePairsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementValuePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ElementValuePairContext)
            else:
                return self.getTypedRuleContext(JavaParser.ElementValuePairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_elementValuePairs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePairs" ):
                listener.enterElementValuePairs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePairs" ):
                listener.exitElementValuePairs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementValuePairs" ):
                return visitor.visitElementValuePairs(self)
            else:
                return visitor.visitChildren(self)




    def elementValuePairs(self):

        localctx = JavaParser.ElementValuePairsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_elementValuePairs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            self.elementValuePair()
            self.state = 817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==72:
                self.state = 813
                self.match(JavaParser.COMMA)
                self.state = 814
                self.elementValuePair()
                self.state = 819
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValuePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(JavaParser.Identifier, 0)

        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def elementValue(self):
            return self.getTypedRuleContext(JavaParser.ElementValueContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_elementValuePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePair" ):
                listener.enterElementValuePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePair" ):
                listener.exitElementValuePair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementValuePair" ):
                return visitor.visitElementValuePair(self)
            else:
                return visitor.visitChildren(self)




    def elementValuePair(self):

        localctx = JavaParser.ElementValuePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_elementValuePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            self.match(JavaParser.Identifier)
            self.state = 821
            self.match(JavaParser.ASSIGN)
            self.state = 822
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def elementValueArrayInitializer(self):
            return self.getTypedRuleContext(JavaParser.ElementValueArrayInitializerContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_elementValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValue" ):
                listener.enterElementValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValue" ):
                listener.exitElementValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementValue" ):
                return visitor.visitElementValue(self)
            else:
                return visitor.visitChildren(self)




    def elementValue(self):

        localctx = JavaParser.ElementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_elementValue)
        try:
            self.state = 827
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 15, 21, 27, 34, 36, 38, 44, 47, 48, 50, 55, 58, 59, 60, 61, 62, 63, 64, 65, 76, 77, 78, 87, 88, 89, 90, 110]:
                self.enterOuterAlt(localctx, 1)
                self.state = 824
                self.expression(0)
                pass
            elif token in [112]:
                self.enterOuterAlt(localctx, 2)
                self.state = 825
                self.annotation()
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 3)
                self.state = 826
                self.elementValueArrayInitializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValueArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def elementValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ElementValueContext)
            else:
                return self.getTypedRuleContext(JavaParser.ElementValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_elementValueArrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValueArrayInitializer" ):
                listener.enterElementValueArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValueArrayInitializer" ):
                listener.exitElementValueArrayInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementValueArrayInitializer" ):
                return visitor.visitElementValueArrayInitializer(self)
            else:
                return visitor.visitChildren(self)




    def elementValueArrayInitializer(self):

        localctx = JavaParser.ElementValueArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_elementValueArrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.match(JavaParser.LBRACE)
            self.state = 838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -250635513661189120) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 351843846746123) != 0):
                self.state = 830
                self.elementValue()
                self.state = 835
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 831
                        self.match(JavaParser.COMMA)
                        self.state = 832
                        self.elementValue() 
                    self.state = 837
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,94,self._ctx)



            self.state = 841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 840
                self.match(JavaParser.COMMA)


            self.state = 843
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaParser.AT, 0)

        def INTERFACE(self):
            return self.getToken(JavaParser.INTERFACE, 0)

        def Identifier(self):
            return self.getToken(JavaParser.Identifier, 0)

        def annotationTypeBody(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeBodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeDeclaration" ):
                listener.enterAnnotationTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeDeclaration" ):
                listener.exitAnnotationTypeDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationTypeDeclaration" ):
                return visitor.visitAnnotationTypeDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def annotationTypeDeclaration(self):

        localctx = JavaParser.AnnotationTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_annotationTypeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.match(JavaParser.AT)
            self.state = 846
            self.match(JavaParser.INTERFACE)
            self.state = 847
            self.match(JavaParser.Identifier)
            self.state = 848
            self.annotationTypeBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def annotationTypeElementDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationTypeElementDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationTypeElementDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeBody" ):
                listener.enterAnnotationTypeBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeBody" ):
                listener.exitAnnotationTypeBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationTypeBody" ):
                return visitor.visitAnnotationTypeBody(self)
            else:
                return visitor.visitChildren(self)




    def annotationTypeBody(self):

        localctx = JavaParser.AnnotationTypeBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_annotationTypeBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.match(JavaParser.LBRACE)
            self.state = 854
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 81758843006194968) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 2748779069441) != 0):
                self.state = 851
                self.annotationTypeElementDeclaration()
                self.state = 856
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 857
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeElementDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationTypeElementRest(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeElementRestContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeElementDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeElementDeclaration" ):
                listener.enterAnnotationTypeElementDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeElementDeclaration" ):
                listener.exitAnnotationTypeElementDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationTypeElementDeclaration" ):
                return visitor.visitAnnotationTypeElementDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def annotationTypeElementDeclaration(self):

        localctx = JavaParser.AnnotationTypeElementDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_annotationTypeElementDeclaration)
        try:
            self.state = 867
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 8, 10, 12, 15, 16, 21, 23, 25, 27, 34, 35, 36, 37, 40, 41, 42, 44, 45, 46, 49, 53, 56, 110, 112]:
                self.enterOuterAlt(localctx, 1)
                self.state = 862
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 859
                        self.modifier() 
                    self.state = 864
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

                self.state = 865
                self.annotationTypeElementRest()
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 2)
                self.state = 866
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeElementRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jType(self):
            return self.getTypedRuleContext(JavaParser.JTypeContext,0)


        def annotationMethodOrConstantRest(self):
            return self.getTypedRuleContext(JavaParser.AnnotationMethodOrConstantRestContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeElementRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeElementRest" ):
                listener.enterAnnotationTypeElementRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeElementRest" ):
                listener.exitAnnotationTypeElementRest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationTypeElementRest" ):
                return visitor.visitAnnotationTypeElementRest(self)
            else:
                return visitor.visitChildren(self)




    def annotationTypeElementRest(self):

        localctx = JavaParser.AnnotationTypeElementRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_annotationTypeElementRest)
        try:
            self.state = 889
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 15, 21, 27, 34, 36, 44, 110]:
                self.enterOuterAlt(localctx, 1)
                self.state = 869
                self.jType()
                self.state = 870
                self.annotationMethodOrConstantRest()
                self.state = 871
                self.match(JavaParser.SEMI)
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 2)
                self.state = 873
                self.classDeclaration()
                self.state = 875
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 874
                    self.match(JavaParser.SEMI)


                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 3)
                self.state = 877
                self.interfaceDeclaration()
                self.state = 879
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                if la_ == 1:
                    self.state = 878
                    self.match(JavaParser.SEMI)


                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 4)
                self.state = 881
                self.enumDeclaration()
                self.state = 883
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 882
                    self.match(JavaParser.SEMI)


                pass
            elif token in [112]:
                self.enterOuterAlt(localctx, 5)
                self.state = 885
                self.annotationTypeDeclaration()
                self.state = 887
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                if la_ == 1:
                    self.state = 886
                    self.match(JavaParser.SEMI)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationMethodOrConstantRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationMethodRest(self):
            return self.getTypedRuleContext(JavaParser.AnnotationMethodRestContext,0)


        def annotationConstantRest(self):
            return self.getTypedRuleContext(JavaParser.AnnotationConstantRestContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationMethodOrConstantRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationMethodOrConstantRest" ):
                listener.enterAnnotationMethodOrConstantRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationMethodOrConstantRest" ):
                listener.exitAnnotationMethodOrConstantRest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationMethodOrConstantRest" ):
                return visitor.visitAnnotationMethodOrConstantRest(self)
            else:
                return visitor.visitChildren(self)




    def annotationMethodOrConstantRest(self):

        localctx = JavaParser.AnnotationMethodOrConstantRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_annotationMethodOrConstantRest)
        try:
            self.state = 893
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 891
                self.annotationMethodRest()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 892
                self.annotationConstantRest()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationMethodRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(JavaParser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def defaultValue(self):
            return self.getTypedRuleContext(JavaParser.DefaultValueContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationMethodRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationMethodRest" ):
                listener.enterAnnotationMethodRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationMethodRest" ):
                listener.exitAnnotationMethodRest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationMethodRest" ):
                return visitor.visitAnnotationMethodRest(self)
            else:
                return visitor.visitChildren(self)




    def annotationMethodRest(self):

        localctx = JavaParser.AnnotationMethodRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_annotationMethodRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            self.match(JavaParser.Identifier)
            self.state = 896
            self.match(JavaParser.LPAREN)
            self.state = 897
            self.match(JavaParser.RPAREN)
            self.state = 899
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 898
                self.defaultValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationConstantRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationConstantRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationConstantRest" ):
                listener.enterAnnotationConstantRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationConstantRest" ):
                listener.exitAnnotationConstantRest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationConstantRest" ):
                return visitor.visitAnnotationConstantRest(self)
            else:
                return visitor.visitChildren(self)




    def annotationConstantRest(self):

        localctx = JavaParser.AnnotationConstantRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_annotationConstantRest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 901
            self.variableDeclarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def elementValue(self):
            return self.getTypedRuleContext(JavaParser.ElementValueContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_defaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValue" ):
                listener.enterDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValue" ):
                listener.exitDefaultValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultValue" ):
                return visitor.visitDefaultValue(self)
            else:
                return visitor.visitChildren(self)




    def defaultValue(self):

        localctx = JavaParser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_defaultValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self.match(JavaParser.DEFAULT)
            self.state = 904
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = JavaParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            self.match(JavaParser.LBRACE)
            self.state = 910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -85569096309694626) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 351843846746251) != 0):
                self.state = 907
                self.blockStatement()
                self.state = 912
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 913
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclarationStatement(self):
            return self.getTypedRuleContext(JavaParser.LocalVariableDeclarationStatementContext,0)


        def statement(self):
            return self.getTypedRuleContext(JavaParser.StatementContext,0)


        def typeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.TypeDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockStatement" ):
                return visitor.visitBlockStatement(self)
            else:
                return visitor.visitChildren(self)




    def blockStatement(self):

        localctx = JavaParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_blockStatement)
        try:
            self.state = 918
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 915
                self.localVariableDeclarationStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 916
                self.statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 917
                self.typeDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalVariableDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(JavaParser.LocalVariableDeclarationContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_localVariableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclarationStatement" ):
                listener.enterLocalVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclarationStatement" ):
                listener.exitLocalVariableDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocalVariableDeclarationStatement" ):
                return visitor.visitLocalVariableDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def localVariableDeclarationStatement(self):

        localctx = JavaParser.LocalVariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_localVariableDeclarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self.localVariableDeclaration()
            self.state = 921
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext,0)


        def jType(self):
            return self.getTypedRuleContext(JavaParser.JTypeContext,0)


        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_localVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclaration" ):
                listener.enterLocalVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclaration" ):
                listener.exitLocalVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocalVariableDeclaration" ):
                return visitor.visitLocalVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def localVariableDeclaration(self):

        localctx = JavaParser.LocalVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_localVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==25 or _la==112:
                self.state = 923
                self.variableModifier()
                self.state = 928
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 931
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 15, 21, 27, 34, 36, 44, 110]:
                self.state = 929
                self.jType()
                pass
            elif token in [1]:
                self.state = 930
                self.match(JavaParser.VAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 933
            self.variableDeclarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def ASSERT(self):
            return self.getToken(JavaParser.ASSERT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def IF(self):
            return self.getToken(JavaParser.IF, 0)

        def parExpression(self):
            return self.getTypedRuleContext(JavaParser.ParExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.StatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.StatementContext,i)


        def ELSE(self):
            return self.getToken(JavaParser.ELSE, 0)

        def FOR(self):
            return self.getToken(JavaParser.FOR, 0)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def forControl(self):
            return self.getTypedRuleContext(JavaParser.ForControlContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def WHILE(self):
            return self.getToken(JavaParser.WHILE, 0)

        def DO(self):
            return self.getToken(JavaParser.DO, 0)

        def TRY(self):
            return self.getToken(JavaParser.TRY, 0)

        def finallyBlock(self):
            return self.getTypedRuleContext(JavaParser.FinallyBlockContext,0)


        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(JavaParser.CatchClauseContext,i)


        def resourceSpecification(self):
            return self.getTypedRuleContext(JavaParser.ResourceSpecificationContext,0)


        def SWITCH(self):
            return self.getToken(JavaParser.SWITCH, 0)

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def switchBlockSection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchBlockSectionContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchBlockSectionContext,i)


        def SYNCHRONIZED(self):
            return self.getToken(JavaParser.SYNCHRONIZED, 0)

        def RETURN(self):
            return self.getToken(JavaParser.RETURN, 0)

        def THROW(self):
            return self.getToken(JavaParser.THROW, 0)

        def BREAK(self):
            return self.getToken(JavaParser.BREAK, 0)

        def Identifier(self):
            return self.getToken(JavaParser.Identifier, 0)

        def CONTINUE(self):
            return self.getToken(JavaParser.CONTINUE, 0)

        def YIELD(self):
            return self.getToken(JavaParser.YIELD, 0)

        def statementExpression(self):
            return self.getTypedRuleContext(JavaParser.StatementExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = JavaParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1037
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 935
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 936
                self.match(JavaParser.ASSERT)
                self.state = 937
                self.expression(0)
                self.state = 940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80:
                    self.state = 938
                    self.match(JavaParser.COLON)
                    self.state = 939
                    self.expression(0)


                self.state = 942
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 944
                self.match(JavaParser.IF)
                self.state = 945
                self.parExpression()
                self.state = 946
                self.statement()
                self.state = 949
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 947
                    self.match(JavaParser.ELSE)
                    self.state = 948
                    self.statement()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 951
                self.match(JavaParser.FOR)
                self.state = 952
                self.match(JavaParser.LPAREN)
                self.state = 953
                self.forControl()
                self.state = 954
                self.match(JavaParser.RPAREN)
                self.state = 955
                self.statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 957
                self.match(JavaParser.WHILE)
                self.state = 958
                self.parExpression()
                self.state = 959
                self.statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 961
                self.match(JavaParser.DO)
                self.state = 962
                self.statement()
                self.state = 963
                self.match(JavaParser.WHILE)
                self.state = 964
                self.parExpression()
                self.state = 965
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 967
                self.match(JavaParser.TRY)
                self.state = 968
                self.block()
                self.state = 978
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [14]:
                    self.state = 970 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 969
                        self.catchClause()
                        self.state = 972 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==14):
                            break

                    self.state = 975
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==26:
                        self.state = 974
                        self.finallyBlock()


                    pass
                elif token in [26]:
                    self.state = 977
                    self.finallyBlock()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 980
                self.match(JavaParser.TRY)
                self.state = 981
                self.resourceSpecification()
                self.state = 982
                self.block()
                self.state = 986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==14:
                    self.state = 983
                    self.catchClause()
                    self.state = 988
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==26:
                    self.state = 989
                    self.finallyBlock()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 992
                self.match(JavaParser.SWITCH)
                self.state = 993
                self.parExpression()
                self.state = 994
                self.match(JavaParser.LBRACE)
                self.state = 998
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==13 or _la==19:
                    self.state = 995
                    self.switchBlockSection()
                    self.state = 1000
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1001
                self.match(JavaParser.RBRACE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1003
                self.match(JavaParser.SYNCHRONIZED)
                self.state = 1004
                self.parExpression()
                self.state = 1005
                self.block()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1007
                self.match(JavaParser.RETURN)
                self.state = 1009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -250635513661189120) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 70368870035459) != 0):
                    self.state = 1008
                    self.expression(0)


                self.state = 1011
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1012
                self.match(JavaParser.THROW)
                self.state = 1013
                self.expression(0)
                self.state = 1014
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1016
                self.match(JavaParser.BREAK)
                self.state = 1018
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==110:
                    self.state = 1017
                    self.match(JavaParser.Identifier)


                self.state = 1020
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1021
                self.match(JavaParser.CONTINUE)
                self.state = 1023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==110:
                    self.state = 1022
                    self.match(JavaParser.Identifier)


                self.state = 1025
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1026
                self.match(JavaParser.YIELD)
                self.state = 1027
                self.expression(0)
                self.state = 1028
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1030
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1031
                self.statementExpression()
                self.state = 1032
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1034
                self.match(JavaParser.Identifier)
                self.state = 1035
                self.match(JavaParser.COLON)
                self.state = 1036
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(JavaParser.CATCH, 0)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def catchType(self):
            return self.getTypedRuleContext(JavaParser.CatchTypeContext,0)


        def Identifier(self):
            return self.getToken(JavaParser.Identifier, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchClause" ):
                return visitor.visitCatchClause(self)
            else:
                return visitor.visitChildren(self)




    def catchClause(self):

        localctx = JavaParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_catchClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self.match(JavaParser.CATCH)
            self.state = 1040
            self.match(JavaParser.LPAREN)
            self.state = 1044
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==25 or _la==112:
                self.state = 1041
                self.variableModifier()
                self.state = 1046
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1047
            self.catchType()
            self.state = 1048
            self.match(JavaParser.Identifier)
            self.state = 1049
            self.match(JavaParser.RPAREN)
            self.state = 1050
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaParser.QualifiedNameContext,i)


        def BITOR(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.BITOR)
            else:
                return self.getToken(JavaParser.BITOR, i)

        def getRuleIndex(self):
            return JavaParser.RULE_catchType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchType" ):
                listener.enterCatchType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchType" ):
                listener.exitCatchType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchType" ):
                return visitor.visitCatchType(self)
            else:
                return visitor.visitChildren(self)




    def catchType(self):

        localctx = JavaParser.CatchTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_catchType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self.qualifiedName()
            self.state = 1057
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==94:
                self.state = 1053
                self.match(JavaParser.BITOR)
                self.state = 1054
                self.qualifiedName()
                self.state = 1059
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinallyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(JavaParser.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_finallyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyBlock" ):
                listener.enterFinallyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyBlock" ):
                listener.exitFinallyBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFinallyBlock" ):
                return visitor.visitFinallyBlock(self)
            else:
                return visitor.visitChildren(self)




    def finallyBlock(self):

        localctx = JavaParser.FinallyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_finallyBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            self.match(JavaParser.FINALLY)
            self.state = 1061
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def resources(self):
            return self.getTypedRuleContext(JavaParser.ResourcesContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_resourceSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceSpecification" ):
                listener.enterResourceSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceSpecification" ):
                listener.exitResourceSpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResourceSpecification" ):
                return visitor.visitResourceSpecification(self)
            else:
                return visitor.visitChildren(self)




    def resourceSpecification(self):

        localctx = JavaParser.ResourceSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_resourceSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1063
            self.match(JavaParser.LPAREN)
            self.state = 1064
            self.resources()
            self.state = 1066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 1065
                self.match(JavaParser.SEMI)


            self.state = 1068
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourcesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def resource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ResourceContext)
            else:
                return self.getTypedRuleContext(JavaParser.ResourceContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.SEMI)
            else:
                return self.getToken(JavaParser.SEMI, i)

        def getRuleIndex(self):
            return JavaParser.RULE_resources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResources" ):
                listener.enterResources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResources" ):
                listener.exitResources(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResources" ):
                return visitor.visitResources(self)
            else:
                return visitor.visitChildren(self)




    def resources(self):

        localctx = JavaParser.ResourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_resources)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1070
            self.resource()
            self.state = 1075
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,126,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1071
                    self.match(JavaParser.SEMI)
                    self.state = 1072
                    self.resource() 
                self.state = 1077
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,126,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_resource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource" ):
                listener.enterResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource" ):
                listener.exitResource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResource" ):
                return visitor.visitResource(self)
            else:
                return visitor.visitChildren(self)




    def resource(self):

        localctx = JavaParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_resource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1081
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==25 or _la==112:
                self.state = 1078
                self.variableModifier()
                self.state = 1083
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1084
            self.classOrInterfaceType()
            self.state = 1085
            self.variableDeclaratorId()
            self.state = 1086
            self.match(JavaParser.ASSIGN)
            self.state = 1087
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBlockSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def ARROW(self):
            return self.getToken(JavaParser.ARROW, 0)

        def statement(self):
            return self.getTypedRuleContext(JavaParser.StatementContext,0)


        def switchLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchLabelContext,i)


        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_switchBlockSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBlockSection" ):
                listener.enterSwitchBlockSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBlockSection" ):
                listener.exitSwitchBlockSection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchBlockSection" ):
                return visitor.visitSwitchBlockSection(self)
            else:
                return visitor.visitChildren(self)




    def switchBlockSection(self):

        localctx = JavaParser.SwitchBlockSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_switchBlockSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1090 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1089
                self.switchLabel()
                self.state = 1092 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==13 or _la==19):
                    break

            self.state = 1103
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [80]:
                self.state = 1094
                self.match(JavaParser.COLON)
                self.state = 1098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -85569096309694626) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 351843846746251) != 0):
                    self.state = 1095
                    self.blockStatement()
                    self.state = 1100
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [97]:
                self.state = 1101
                self.match(JavaParser.ARROW)
                self.state = 1102
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(JavaParser.CASE, 0)

        def pattern(self):
            return self.getTypedRuleContext(JavaParser.PatternContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(JavaParser.ConstantExpressionContext,0)


        def WHEN(self):
            return self.getToken(JavaParser.WHEN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_switchLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchLabel" ):
                listener.enterSwitchLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchLabel" ):
                listener.exitSwitchLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchLabel" ):
                return visitor.visitSwitchLabel(self)
            else:
                return visitor.visitChildren(self)




    def switchLabel(self):

        localctx = JavaParser.SwitchLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_switchLabel)
        self._la = 0 # Token type
        try:
            self.state = 1115
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1105
                self.match(JavaParser.CASE)
                self.state = 1108
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                if la_ == 1:
                    self.state = 1106
                    self.pattern()
                    pass

                elif la_ == 2:
                    self.state = 1107
                    self.constantExpression()
                    pass


                self.state = 1112
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 1110
                    self.match(JavaParser.WHEN)
                    self.state = 1111
                    self.expression(0)


                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1114
                self.match(JavaParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enhancedForControl(self):
            return self.getTypedRuleContext(JavaParser.EnhancedForControlContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.SEMI)
            else:
                return self.getToken(JavaParser.SEMI, i)

        def forInit(self):
            return self.getTypedRuleContext(JavaParser.ForInitContext,0)


        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def forUpdate(self):
            return self.getTypedRuleContext(JavaParser.ForUpdateContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_forControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForControl" ):
                listener.enterForControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForControl" ):
                listener.exitForControl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForControl" ):
                return visitor.visitForControl(self)
            else:
                return visitor.visitChildren(self)




    def forControl(self):

        localctx = JavaParser.ForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_forControl)
        self._la = 0 # Token type
        try:
            self.state = 1129
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1117
                self.enhancedForControl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1119
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -250635513627634686) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 351843846746115) != 0):
                    self.state = 1118
                    self.forInit()


                self.state = 1121
                self.match(JavaParser.SEMI)
                self.state = 1123
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -250635513661189120) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 70368870035459) != 0):
                    self.state = 1122
                    self.expression(0)


                self.state = 1125
                self.match(JavaParser.SEMI)
                self.state = 1127
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -250635513661189120) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 70368870035459) != 0):
                    self.state = 1126
                    self.forUpdate()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForInitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(JavaParser.LocalVariableDeclarationContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_forInit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInit" ):
                listener.enterForInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInit" ):
                listener.exitForInit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForInit" ):
                return visitor.visitForInit(self)
            else:
                return visitor.visitChildren(self)




    def forInit(self):

        localctx = JavaParser.ForInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_forInit)
        try:
            self.state = 1133
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1131
                self.localVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1132
                self.expressionList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnhancedForControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def jType(self):
            return self.getTypedRuleContext(JavaParser.JTypeContext,0)


        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_enhancedForControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnhancedForControl" ):
                listener.enterEnhancedForControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnhancedForControl" ):
                listener.exitEnhancedForControl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnhancedForControl" ):
                return visitor.visitEnhancedForControl(self)
            else:
                return visitor.visitChildren(self)




    def enhancedForControl(self):

        localctx = JavaParser.EnhancedForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_enhancedForControl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==25 or _la==112:
                self.state = 1135
                self.variableModifier()
                self.state = 1140
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1143
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 15, 21, 27, 34, 36, 44, 110]:
                self.state = 1141
                self.jType()
                pass
            elif token in [1]:
                self.state = 1142
                self.match(JavaParser.VAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1145
            self.variableDeclaratorId()
            self.state = 1146
            self.match(JavaParser.COLON)
            self.state = 1147
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForUpdateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_forUpdate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForUpdate" ):
                listener.enterForUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForUpdate" ):
                listener.exitForUpdate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForUpdate" ):
                return visitor.visitForUpdate(self)
            else:
                return visitor.visitChildren(self)




    def forUpdate(self):

        localctx = JavaParser.ForUpdateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_forUpdate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1149
            self.expressionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_parExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParExpression" ):
                listener.enterParExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParExpression" ):
                listener.exitParExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParExpression" ):
                return visitor.visitParExpression(self)
            else:
                return visitor.visitChildren(self)




    def parExpression(self):

        localctx = JavaParser.ParExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_parExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1151
            self.match(JavaParser.LPAREN)
            self.state = 1152
            self.expression(0)
            self.state = 1153
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionList" ):
                return visitor.visitExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def expressionList(self):

        localctx = JavaParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1155
            self.expression(0)
            self.state = 1160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==72:
                self.state = 1156
                self.match(JavaParser.COMMA)
                self.state = 1157
                self.expression(0)
                self.state = 1162
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_statementExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementExpression" ):
                listener.enterStatementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementExpression" ):
                listener.exitStatementExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementExpression" ):
                return visitor.visitStatementExpression(self)
            else:
                return visitor.visitChildren(self)




    def statementExpression(self):

        localctx = JavaParser.StatementExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_statementExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1163
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_constantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpression" ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpression" ):
                listener.exitConstantExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantExpression" ):
                return visitor.visitConstantExpression(self)
            else:
                return visitor.visitChildren(self)




    def constantExpression(self):

        localctx = JavaParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1165
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jType(self):
            return self.getTypedRuleContext(JavaParser.JTypeContext,0)


        def Identifier(self):
            return self.getToken(JavaParser.Identifier, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)




    def pattern(self):

        localctx = JavaParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1167
            self.jType()
            self.state = 1175
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.state = 1171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==112:
                    self.state = 1168
                    self.annotation()
                    self.state = 1173
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1174
                self.match(JavaParser.Identifier)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.prefix = None # Token
            self.op = None # Token
            self.postfix = None # Token

        def primary(self):
            return self.getTypedRuleContext(JavaParser.PrimaryContext,0)


        def NEW(self):
            return self.getToken(JavaParser.NEW, 0)

        def creator(self):
            return self.getTypedRuleContext(JavaParser.CreatorContext,0)


        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def jType(self):
            return self.getTypedRuleContext(JavaParser.JTypeContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def ADD(self):
            return self.getToken(JavaParser.ADD, 0)

        def SUB(self):
            return self.getToken(JavaParser.SUB, 0)

        def INC(self):
            return self.getToken(JavaParser.INC, 0)

        def DEC(self):
            return self.getToken(JavaParser.DEC, 0)

        def TILDE(self):
            return self.getToken(JavaParser.TILDE, 0)

        def BANG(self):
            return self.getToken(JavaParser.BANG, 0)

        def lambdaExpression(self):
            return self.getTypedRuleContext(JavaParser.LambdaExpressionContext,0)


        def switchExpression(self):
            return self.getTypedRuleContext(JavaParser.SwitchExpressionContext,0)


        def MUL(self):
            return self.getToken(JavaParser.MUL, 0)

        def DIV(self):
            return self.getToken(JavaParser.DIV, 0)

        def MOD(self):
            return self.getToken(JavaParser.MOD, 0)

        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LT)
            else:
                return self.getToken(JavaParser.LT, i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.GT)
            else:
                return self.getToken(JavaParser.GT, i)

        def LE(self):
            return self.getToken(JavaParser.LE, 0)

        def GE(self):
            return self.getToken(JavaParser.GE, 0)

        def EQUAL(self):
            return self.getToken(JavaParser.EQUAL, 0)

        def NOTEQUAL(self):
            return self.getToken(JavaParser.NOTEQUAL, 0)

        def BITAND(self):
            return self.getToken(JavaParser.BITAND, 0)

        def CARET(self):
            return self.getToken(JavaParser.CARET, 0)

        def BITOR(self):
            return self.getToken(JavaParser.BITOR, 0)

        def AND(self):
            return self.getToken(JavaParser.AND, 0)

        def OR(self):
            return self.getToken(JavaParser.OR, 0)

        def QUESTION(self):
            return self.getToken(JavaParser.QUESTION, 0)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def ADD_ASSIGN(self):
            return self.getToken(JavaParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(JavaParser.SUB_ASSIGN, 0)

        def MUL_ASSIGN(self):
            return self.getToken(JavaParser.MUL_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(JavaParser.DIV_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(JavaParser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(JavaParser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(JavaParser.XOR_ASSIGN, 0)

        def RSHIFT_ASSIGN(self):
            return self.getToken(JavaParser.RSHIFT_ASSIGN, 0)

        def URSHIFT_ASSIGN(self):
            return self.getToken(JavaParser.URSHIFT_ASSIGN, 0)

        def LSHIFT_ASSIGN(self):
            return self.getToken(JavaParser.LSHIFT_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(JavaParser.MOD_ASSIGN, 0)

        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def Identifier(self):
            return self.getToken(JavaParser.Identifier, 0)

        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def innerCreator(self):
            return self.getTypedRuleContext(JavaParser.InnerCreatorContext,0)


        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def superSuffix(self):
            return self.getTypedRuleContext(JavaParser.SuperSuffixContext,0)


        def explicitGenericInvocation(self):
            return self.getTypedRuleContext(JavaParser.ExplicitGenericInvocationContext,0)


        def COLONCOLON(self):
            return self.getToken(JavaParser.COLONCOLON, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,0)


        def LBRACK(self):
            return self.getToken(JavaParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(JavaParser.RBRACK, 0)

        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext,0)


        def INSTANCEOF(self):
            return self.getToken(JavaParser.INSTANCEOF, 0)

        def pattern(self):
            return self.getTypedRuleContext(JavaParser.PatternContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 186
        self.enterRecursionRule(localctx, 186, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1190
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.state = 1178
                self.primary()
                pass

            elif la_ == 2:
                self.state = 1179
                self.match(JavaParser.NEW)
                self.state = 1180
                self.creator()
                pass

            elif la_ == 3:
                self.state = 1181
                self.match(JavaParser.LPAREN)
                self.state = 1182
                self.jType()
                self.state = 1183
                self.match(JavaParser.RPAREN)
                self.state = 1184
                self.expression(18)
                pass

            elif la_ == 4:
                self.state = 1186
                localctx.prefix = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & 15363) != 0)):
                    localctx.prefix = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1187
                self.expression(17)
                pass

            elif la_ == 5:
                self.state = 1188
                self.lambdaExpression()
                pass

            elif la_ == 6:
                self.state = 1189
                self.switchExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1283
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1281
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                    if la_ == 1:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1192
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1193
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 35) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1194
                        self.expression(16)
                        pass

                    elif la_ == 2:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1195
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1196
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==89 or _la==90):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1197
                        self.expression(15)
                        pass

                    elif la_ == 3:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1198
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1206
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                        if la_ == 1:
                            self.state = 1199
                            self.match(JavaParser.LT)
                            self.state = 1200
                            self.match(JavaParser.LT)
                            pass

                        elif la_ == 2:
                            self.state = 1201
                            self.match(JavaParser.GT)
                            self.state = 1202
                            self.match(JavaParser.GT)
                            self.state = 1203
                            self.match(JavaParser.GT)
                            pass

                        elif la_ == 3:
                            self.state = 1204
                            self.match(JavaParser.GT)
                            self.state = 1205
                            self.match(JavaParser.GT)
                            pass


                        self.state = 1208
                        self.expression(14)
                        pass

                    elif la_ == 4:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1209
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1210
                        _la = self._input.LA(1)
                        if not(((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 387) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1211
                        self.expression(13)
                        pass

                    elif la_ == 5:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1212
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1213
                        _la = self._input.LA(1)
                        if not(_la==81 or _la==84):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1214
                        self.expression(11)
                        pass

                    elif la_ == 6:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1215
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1216
                        self.match(JavaParser.BITAND)
                        self.state = 1217
                        self.expression(10)
                        pass

                    elif la_ == 7:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1218
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1219
                        self.match(JavaParser.CARET)
                        self.state = 1220
                        self.expression(9)
                        pass

                    elif la_ == 8:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1221
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1222
                        self.match(JavaParser.BITOR)
                        self.state = 1223
                        self.expression(8)
                        pass

                    elif la_ == 9:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1224
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1225
                        self.match(JavaParser.AND)
                        self.state = 1226
                        self.expression(7)
                        pass

                    elif la_ == 10:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1227
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1228
                        self.match(JavaParser.OR)
                        self.state = 1229
                        self.expression(6)
                        pass

                    elif la_ == 11:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1230
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1231
                        self.match(JavaParser.QUESTION)
                        self.state = 1232
                        self.expression(0)
                        self.state = 1233
                        self.match(JavaParser.COLON)
                        self.state = 1234
                        self.expression(5)
                        pass

                    elif la_ == 12:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1236
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1237
                        _la = self._input.LA(1)
                        if not(((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 68685922305) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1238
                        self.expression(1)
                        pass

                    elif la_ == 13:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1239
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 1240
                        self.match(JavaParser.DOT)
                        self.state = 1241
                        self.match(JavaParser.Identifier)
                        pass

                    elif la_ == 14:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1242
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 1243
                        self.match(JavaParser.DOT)
                        self.state = 1244
                        self.match(JavaParser.THIS)
                        pass

                    elif la_ == 15:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1245
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 1246
                        self.match(JavaParser.DOT)
                        self.state = 1247
                        self.match(JavaParser.NEW)
                        self.state = 1249
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==76:
                            self.state = 1248
                            self.nonWildcardTypeArguments()


                        self.state = 1251
                        self.innerCreator()
                        pass

                    elif la_ == 16:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1252
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 1253
                        self.match(JavaParser.DOT)
                        self.state = 1254
                        self.match(JavaParser.SUPER)
                        self.state = 1255
                        self.superSuffix()
                        pass

                    elif la_ == 17:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1256
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 1257
                        self.match(JavaParser.DOT)
                        self.state = 1258
                        self.explicitGenericInvocation()
                        pass

                    elif la_ == 18:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1259
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 1260
                        self.match(JavaParser.COLONCOLON)
                        self.state = 1262
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==76:
                            self.state = 1261
                            self.typeArguments()


                        self.state = 1264
                        _la = self._input.LA(1)
                        if not(_la==38 or _la==110):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 19:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1265
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 1266
                        self.match(JavaParser.LBRACK)
                        self.state = 1267
                        self.expression(0)
                        self.state = 1268
                        self.match(JavaParser.RBRACK)
                        pass

                    elif la_ == 20:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1270
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 1271
                        self.match(JavaParser.LPAREN)
                        self.state = 1273
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & -250635513661189120) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 70368870035459) != 0):
                            self.state = 1272
                            self.expressionList()


                        self.state = 1275
                        self.match(JavaParser.RPAREN)
                        pass

                    elif la_ == 21:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1276
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1277
                        localctx.postfix = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==87 or _la==88):
                            localctx.postfix = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 22:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1278
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1279
                        self.match(JavaParser.INSTANCEOF)
                        self.state = 1280
                        self.pattern()
                        pass

             
                self.state = 1285
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def literal(self):
            return self.getTypedRuleContext(JavaParser.LiteralContext,0)


        def Identifier(self):
            return self.getToken(JavaParser.Identifier, 0)

        def jType(self):
            return self.getTypedRuleContext(JavaParser.JTypeContext,0)


        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def CLASS(self):
            return self.getToken(JavaParser.CLASS, 0)

        def VOID(self):
            return self.getToken(JavaParser.VOID, 0)

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def explicitGenericInvocationSuffix(self):
            return self.getTypedRuleContext(JavaParser.ExplicitGenericInvocationSuffixContext,0)


        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def COLONCOLON(self):
            return self.getToken(JavaParser.COLONCOLON, 0)

        def NEW(self):
            return self.getToken(JavaParser.NEW, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary" ):
                return visitor.visitPrimary(self)
            else:
                return visitor.visitChildren(self)




    def primary(self):

        localctx = JavaParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_primary)
        self._la = 0 # Token type
        try:
            self.state = 1314
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1286
                self.match(JavaParser.LPAREN)
                self.state = 1287
                self.expression(0)
                self.state = 1288
                self.match(JavaParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1290
                self.match(JavaParser.THIS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1291
                self.match(JavaParser.SUPER)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1292
                self.literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1293
                self.match(JavaParser.Identifier)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1294
                self.jType()
                self.state = 1295
                self.match(JavaParser.DOT)
                self.state = 1296
                self.match(JavaParser.CLASS)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1298
                self.match(JavaParser.VOID)
                self.state = 1299
                self.match(JavaParser.DOT)
                self.state = 1300
                self.match(JavaParser.CLASS)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1301
                self.nonWildcardTypeArguments()
                self.state = 1305
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [47, 110]:
                    self.state = 1302
                    self.explicitGenericInvocationSuffix()
                    pass
                elif token in [50]:
                    self.state = 1303
                    self.match(JavaParser.THIS)
                    self.state = 1304
                    self.arguments()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1307
                self.jType()
                self.state = 1308
                self.match(JavaParser.COLONCOLON)
                self.state = 1310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 1309
                    self.typeArguments()


                self.state = 1312
                _la = self._input.LA(1)
                if not(_la==38 or _la==110):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(JavaParser.SWITCH, 0)

        def parExpression(self):
            return self.getTypedRuleContext(JavaParser.ParExpressionContext,0)


        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def switchBlockSection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchBlockSectionContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchBlockSectionContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_switchExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchExpression" ):
                listener.enterSwitchExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchExpression" ):
                listener.exitSwitchExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchExpression" ):
                return visitor.visitSwitchExpression(self)
            else:
                return visitor.visitChildren(self)




    def switchExpression(self):

        localctx = JavaParser.SwitchExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_switchExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1316
            self.match(JavaParser.SWITCH)
            self.state = 1317
            self.parExpression()
            self.state = 1318
            self.match(JavaParser.LBRACE)
            self.state = 1322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==13 or _la==19:
                self.state = 1319
                self.switchBlockSection()
                self.state = 1324
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1325
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaParameters(self):
            return self.getTypedRuleContext(JavaParser.LambdaParametersContext,0)


        def ARROW(self):
            return self.getToken(JavaParser.ARROW, 0)

        def lambdaBody(self):
            return self.getTypedRuleContext(JavaParser.LambdaBodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_lambdaExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaExpression" ):
                listener.enterLambdaExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaExpression" ):
                listener.exitLambdaExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaExpression" ):
                return visitor.visitLambdaExpression(self)
            else:
                return visitor.visitChildren(self)




    def lambdaExpression(self):

        localctx = JavaParser.LambdaExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_lambdaExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1327
            self.lambdaParameters()
            self.state = 1328
            self.match(JavaParser.ARROW)
            self.state = 1329
            self.lambdaBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.Identifier)
            else:
                return self.getToken(JavaParser.Identifier, i)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JavaParser.FormalParameterListContext,0)


        def inferredFormalParameterList(self):
            return self.getTypedRuleContext(JavaParser.InferredFormalParameterListContext,0)


        def jType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.JTypeContext)
            else:
                return self.getTypedRuleContext(JavaParser.JTypeContext,i)


        def VAR(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.VAR)
            else:
                return self.getToken(JavaParser.VAR, i)

        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_lambdaParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameters" ):
                listener.enterLambdaParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameters" ):
                listener.exitLambdaParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaParameters" ):
                return visitor.visitLambdaParameters(self)
            else:
                return visitor.visitChildren(self)




    def lambdaParameters(self):

        localctx = JavaParser.LambdaParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_lambdaParameters)
        self._la = 0 # Token type
        try:
            self.state = 1371
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1331
                self.match(JavaParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1332
                self.match(JavaParser.LPAREN)
                self.state = 1334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 17678255297538) != 0) or _la==110 or _la==112:
                    self.state = 1333
                    self.formalParameterList()


                self.state = 1336
                self.match(JavaParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1337
                self.match(JavaParser.LPAREN)
                self.state = 1338
                self.inferredFormalParameterList()
                self.state = 1339
                self.match(JavaParser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1341
                self.match(JavaParser.LPAREN)
                self.state = 1345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==25 or _la==112:
                    self.state = 1342
                    self.variableModifier()
                    self.state = 1347
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1350
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10, 12, 15, 21, 27, 34, 36, 44, 110]:
                    self.state = 1348
                    self.jType()
                    pass
                elif token in [1]:
                    self.state = 1349
                    self.match(JavaParser.VAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1352
                self.match(JavaParser.Identifier)
                self.state = 1367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==72:
                    self.state = 1353
                    self.match(JavaParser.COMMA)
                    self.state = 1357
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==25 or _la==112:
                        self.state = 1354
                        self.variableModifier()
                        self.state = 1359
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1362
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [10, 12, 15, 21, 27, 34, 36, 44, 110]:
                        self.state = 1360
                        self.jType()
                        pass
                    elif token in [1]:
                        self.state = 1361
                        self.match(JavaParser.VAR)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1364
                    self.match(JavaParser.Identifier)
                    self.state = 1369
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1370
                self.match(JavaParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InferredFormalParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.Identifier)
            else:
                return self.getToken(JavaParser.Identifier, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_inferredFormalParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInferredFormalParameterList" ):
                listener.enterInferredFormalParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInferredFormalParameterList" ):
                listener.exitInferredFormalParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInferredFormalParameterList" ):
                return visitor.visitInferredFormalParameterList(self)
            else:
                return visitor.visitChildren(self)




    def inferredFormalParameterList(self):

        localctx = JavaParser.InferredFormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_inferredFormalParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1373
            self.match(JavaParser.Identifier)
            self.state = 1378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==72:
                self.state = 1374
                self.match(JavaParser.COMMA)
                self.state = 1375
                self.match(JavaParser.Identifier)
                self.state = 1380
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_lambdaBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaBody" ):
                listener.enterLambdaBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaBody" ):
                listener.exitLambdaBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaBody" ):
                return visitor.visitLambdaBody(self)
            else:
                return visitor.visitChildren(self)




    def lambdaBody(self):

        localctx = JavaParser.LambdaBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_lambdaBody)
        try:
            self.state = 1383
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 12, 15, 21, 27, 34, 36, 38, 44, 47, 48, 50, 55, 58, 59, 60, 61, 62, 63, 64, 65, 76, 77, 78, 87, 88, 89, 90, 110]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1381
                self.expression(0)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1382
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def createdName(self):
            return self.getTypedRuleContext(JavaParser.CreatedNameContext,0)


        def classCreatorRest(self):
            return self.getTypedRuleContext(JavaParser.ClassCreatorRestContext,0)


        def arrayCreatorRest(self):
            return self.getTypedRuleContext(JavaParser.ArrayCreatorRestContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_creator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreator" ):
                listener.enterCreator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreator" ):
                listener.exitCreator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreator" ):
                return visitor.visitCreator(self)
            else:
                return visitor.visitChildren(self)




    def creator(self):

        localctx = JavaParser.CreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_creator)
        try:
            self.state = 1394
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [76]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1385
                self.nonWildcardTypeArguments()
                self.state = 1386
                self.createdName()
                self.state = 1387
                self.classCreatorRest()
                pass
            elif token in [10, 12, 15, 21, 27, 34, 36, 44, 110]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1389
                self.createdName()
                self.state = 1392
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [69]:
                    self.state = 1390
                    self.arrayCreatorRest()
                    pass
                elif token in [65]:
                    self.state = 1391
                    self.classCreatorRest()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.Identifier)
            else:
                return self.getToken(JavaParser.Identifier, i)

        def typeArgumentsOrDiamond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeArgumentsOrDiamondContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeArgumentsOrDiamondContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def primitiveType(self):
            return self.getTypedRuleContext(JavaParser.PrimitiveTypeContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_createdName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatedName" ):
                listener.enterCreatedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatedName" ):
                listener.exitCreatedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreatedName" ):
                return visitor.visitCreatedName(self)
            else:
                return visitor.visitChildren(self)




    def createdName(self):

        localctx = JavaParser.CreatedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_createdName)
        self._la = 0 # Token type
        try:
            self.state = 1411
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [110]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1396
                self.match(JavaParser.Identifier)
                self.state = 1398
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 1397
                    self.typeArgumentsOrDiamond()


                self.state = 1407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==73:
                    self.state = 1400
                    self.match(JavaParser.DOT)
                    self.state = 1401
                    self.match(JavaParser.Identifier)
                    self.state = 1403
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==76:
                        self.state = 1402
                        self.typeArgumentsOrDiamond()


                    self.state = 1409
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [10, 12, 15, 21, 27, 34, 36, 44]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1410
                self.primitiveType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerCreatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(JavaParser.Identifier, 0)

        def classCreatorRest(self):
            return self.getTypedRuleContext(JavaParser.ClassCreatorRestContext,0)


        def nonWildcardTypeArgumentsOrDiamond(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsOrDiamondContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_innerCreator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerCreator" ):
                listener.enterInnerCreator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerCreator" ):
                listener.exitInnerCreator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInnerCreator" ):
                return visitor.visitInnerCreator(self)
            else:
                return visitor.visitChildren(self)




    def innerCreator(self):

        localctx = JavaParser.InnerCreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_innerCreator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1413
            self.match(JavaParser.Identifier)
            self.state = 1415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 1414
                self.nonWildcardTypeArgumentsOrDiamond()


            self.state = 1417
            self.classCreatorRest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayCreatorRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def arrayInitializer(self):
            return self.getTypedRuleContext(JavaParser.ArrayInitializerContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_arrayCreatorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCreatorRest" ):
                listener.enterArrayCreatorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCreatorRest" ):
                listener.exitArrayCreatorRest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayCreatorRest" ):
                return visitor.visitArrayCreatorRest(self)
            else:
                return visitor.visitChildren(self)




    def arrayCreatorRest(self):

        localctx = JavaParser.ArrayCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_arrayCreatorRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1419
            self.match(JavaParser.LBRACK)
            self.state = 1447
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [70]:
                self.state = 1420
                self.match(JavaParser.RBRACK)
                self.state = 1425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==69:
                    self.state = 1421
                    self.match(JavaParser.LBRACK)
                    self.state = 1422
                    self.match(JavaParser.RBRACK)
                    self.state = 1427
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1428
                self.arrayInitializer()
                pass
            elif token in [10, 12, 15, 21, 27, 34, 36, 38, 44, 47, 48, 50, 55, 58, 59, 60, 61, 62, 63, 64, 65, 76, 77, 78, 87, 88, 89, 90, 110]:
                self.state = 1429
                self.expression(0)
                self.state = 1430
                self.match(JavaParser.RBRACK)
                self.state = 1437
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1431
                        self.match(JavaParser.LBRACK)
                        self.state = 1432
                        self.expression(0)
                        self.state = 1433
                        self.match(JavaParser.RBRACK) 
                    self.state = 1439
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

                self.state = 1444
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,173,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1440
                        self.match(JavaParser.LBRACK)
                        self.state = 1441
                        self.match(JavaParser.RBRACK) 
                    self.state = 1446
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,173,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassCreatorRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(JavaParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_classCreatorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassCreatorRest" ):
                listener.enterClassCreatorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassCreatorRest" ):
                listener.exitClassCreatorRest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassCreatorRest" ):
                return visitor.visitClassCreatorRest(self)
            else:
                return visitor.visitChildren(self)




    def classCreatorRest(self):

        localctx = JavaParser.ClassCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_classCreatorRest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1449
            self.arguments()
            self.state = 1451
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                self.state = 1450
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitGenericInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def explicitGenericInvocationSuffix(self):
            return self.getTypedRuleContext(JavaParser.ExplicitGenericInvocationSuffixContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_explicitGenericInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitGenericInvocation" ):
                listener.enterExplicitGenericInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitGenericInvocation" ):
                listener.exitExplicitGenericInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitGenericInvocation" ):
                return visitor.visitExplicitGenericInvocation(self)
            else:
                return visitor.visitChildren(self)




    def explicitGenericInvocation(self):

        localctx = JavaParser.ExplicitGenericInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_explicitGenericInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1453
            self.nonWildcardTypeArguments()
            self.state = 1454
            self.explicitGenericInvocationSuffix()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonWildcardTypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParser.TypeListContext,0)


        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_nonWildcardTypeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonWildcardTypeArguments" ):
                listener.enterNonWildcardTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonWildcardTypeArguments" ):
                listener.exitNonWildcardTypeArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonWildcardTypeArguments" ):
                return visitor.visitNonWildcardTypeArguments(self)
            else:
                return visitor.visitChildren(self)




    def nonWildcardTypeArguments(self):

        localctx = JavaParser.NonWildcardTypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_nonWildcardTypeArguments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1456
            self.match(JavaParser.LT)
            self.state = 1457
            self.typeList()
            self.state = 1458
            self.match(JavaParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsOrDiamondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_typeArgumentsOrDiamond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgumentsOrDiamond" ):
                listener.enterTypeArgumentsOrDiamond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgumentsOrDiamond" ):
                listener.exitTypeArgumentsOrDiamond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeArgumentsOrDiamond" ):
                return visitor.visitTypeArgumentsOrDiamond(self)
            else:
                return visitor.visitChildren(self)




    def typeArgumentsOrDiamond(self):

        localctx = JavaParser.TypeArgumentsOrDiamondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_typeArgumentsOrDiamond)
        try:
            self.state = 1463
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1460
                self.match(JavaParser.LT)
                self.state = 1461
                self.match(JavaParser.GT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1462
                self.typeArguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonWildcardTypeArgumentsOrDiamondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_nonWildcardTypeArgumentsOrDiamond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonWildcardTypeArgumentsOrDiamond" ):
                listener.enterNonWildcardTypeArgumentsOrDiamond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonWildcardTypeArgumentsOrDiamond" ):
                listener.exitNonWildcardTypeArgumentsOrDiamond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonWildcardTypeArgumentsOrDiamond" ):
                return visitor.visitNonWildcardTypeArgumentsOrDiamond(self)
            else:
                return visitor.visitChildren(self)




    def nonWildcardTypeArgumentsOrDiamond(self):

        localctx = JavaParser.NonWildcardTypeArgumentsOrDiamondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_nonWildcardTypeArgumentsOrDiamond)
        try:
            self.state = 1468
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1465
                self.match(JavaParser.LT)
                self.state = 1466
                self.match(JavaParser.GT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1467
                self.nonWildcardTypeArguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuperSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def Identifier(self):
            return self.getToken(JavaParser.Identifier, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_superSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperSuffix" ):
                listener.enterSuperSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperSuffix" ):
                listener.exitSuperSuffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuperSuffix" ):
                return visitor.visitSuperSuffix(self)
            else:
                return visitor.visitChildren(self)




    def superSuffix(self):

        localctx = JavaParser.SuperSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_superSuffix)
        try:
            self.state = 1476
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1470
                self.arguments()
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1471
                self.match(JavaParser.DOT)
                self.state = 1472
                self.match(JavaParser.Identifier)
                self.state = 1474
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
                if la_ == 1:
                    self.state = 1473
                    self.arguments()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitGenericInvocationSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def superSuffix(self):
            return self.getTypedRuleContext(JavaParser.SuperSuffixContext,0)


        def Identifier(self):
            return self.getToken(JavaParser.Identifier, 0)

        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_explicitGenericInvocationSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitGenericInvocationSuffix" ):
                listener.enterExplicitGenericInvocationSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitGenericInvocationSuffix" ):
                listener.exitExplicitGenericInvocationSuffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitGenericInvocationSuffix" ):
                return visitor.visitExplicitGenericInvocationSuffix(self)
            else:
                return visitor.visitChildren(self)




    def explicitGenericInvocationSuffix(self):

        localctx = JavaParser.ExplicitGenericInvocationSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_explicitGenericInvocationSuffix)
        try:
            self.state = 1482
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [47]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1478
                self.match(JavaParser.SUPER)
                self.state = 1479
                self.superSuffix()
                pass
            elif token in [110]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1480
                self.match(JavaParser.Identifier)
                self.state = 1481
                self.arguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = JavaParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1484
            self.match(JavaParser.LPAREN)
            self.state = 1486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -250635513661189120) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 70368870035459) != 0):
                self.state = 1485
                self.expressionList()


            self.state = 1488
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[93] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 11)
         




