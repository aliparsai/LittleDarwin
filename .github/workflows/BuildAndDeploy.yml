name: Build and Deploy

on:
  workflow_dispatch:
  push:
    tags:
      - '*'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade setuptools wheel twine graphviz antlr4-python3-runtime

      - name: Build and publish
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        run: |
          python setup.py sdist bdist_wheel
          twine upload dist/*

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Get Version
        shell: bash
        run: echo "VERSION=${GITHUB_REF/refs/tags/v}" >> $GITHUB_ENV

      - uses: actions/ch build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Get Version
        shell: bash
        run: echo "VERSION=${GITHUB_REF/refs/tags/v}" >> $GITHUB_ENV

      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Set Up Python 3
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade pyinstaller setuptools wheel antlr4-python3-runtime

      - name: Run PyInstaller
        run: python -m PyInstaller --onefile --hidden-import='pkg_resources.py2_warn' ./LittleDarwin.py

      - name: Package Binary
        run: |
          mkdir -p binaries/${{ env.VERSION }}
          mv ./dist/LittleDarwin* ./binaries/${{ env.VERSION }}/

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ runner.os }}
          path: binaries/${{ env.VERSION }}/

  create-pr:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          ref: 'master'

      - name: Get Version
        shell: bash
        run: echo "VERSION=${GITHUB_REF/refs/tags/v}" >> $GITHUB_ENV

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: binaries/${{ env.VERSION }}
          merge-multiple: true

      - name: Commit Changes
        run: |
          git config user.email "AutomaticBuilder@githubactions.job"
          git config user.name "AutomaticBuilder"
          git add binaries
          git commit -m "Adding Binary Version ${{ env.VERSION }} (all platforms)" || echo "No changes to commit"

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          branch: release-${{ env.VERSION }}
          title: "Release ${{ env.VERSION }} (all platforms)"
          body: |
            This PR adds the binaries for version `${{ env.VERSION }}` for all supported operating systems.
          labels: release, automated-pr
          base: master
          token: ${{ secrets.GITHUB_TOKEN }}
